<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>面向毕设的react学习笔记</title>
    <link href="/2021/12/07/%E9%9D%A2%E5%90%91%E6%AF%95%E8%AE%BE%E7%9A%84react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/12/07/%E9%9D%A2%E5%90%91%E6%AF%95%E8%AE%BE%E7%9A%84react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="面向毕设的-react-学习笔记"><a href="#面向毕设的-react-学习笔记" class="headerlink" title="面向毕设的 react 学习笔记"></a>面向毕设的 react 学习笔记</h1>]]></content>
    
    
    <categories>
      
      <category>前端搬砖日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/12/06/hello-world/"/>
    <url>/2021/12/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS下llvm编译的踩坑经历</title>
    <link href="/2021/06/20/macOS%E4%B8%8Bllvm%E7%BC%96%E8%AF%91%E7%9A%84%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/"/>
    <url>/2021/06/20/macOS%E4%B8%8Bllvm%E7%BC%96%E8%AF%91%E7%9A%84%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="macOS-下-llvm-编译的踩坑经历"><a href="#macOS-下-llvm-编译的踩坑经历" class="headerlink" title="macOS 下 llvm 编译的踩坑经历"></a>macOS 下 llvm 编译的踩坑经历</h1><h2 id="出现问题："><a href="#出现问题：" class="headerlink" title="出现问题："></a>出现问题：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">error: no member named <span class="hljs-string">&#x27;MaybeAlign&#x27;</span> <span class="hljs-keyword">in</span> namespace <span class="hljs-string">&#x27;llvm&#x27;</span><br>    <span class="hljs-built_in">return</span> context.builder.CreateAlignedStore(val, ptr, llvm::MaybeAlign(4));<br>                                                        ~~~~~~^<br>error: no member named <span class="hljs-string">&#x27;MaybeAlign&#x27;</span> <span class="hljs-keyword">in</span> namespace <span class="hljs-string">&#x27;llvm&#x27;</span><br>    <span class="hljs-built_in">return</span> context.builder.CreateAlignedLoad(ptr, llvm::MaybeAlign(4));<br></code></pre></td></tr></table></figure><h2 id="解决过程："><a href="#解决过程：" class="headerlink" title="解决过程："></a>解决过程：</h2><p>使用<code>brew info llvm</code>查看 llvm 版本（<code>brew install llvm</code>安装）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">llvm: stable 12.0.0 (bottled), HEAD [keg-only]<br></code></pre></td></tr></table></figure><p>发现是<code>keg-only</code>的版本（我也不知道这是什么），但是 brew 提示了我</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">If you need to have llvm first <span class="hljs-keyword">in</span> your PATH, run:<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=&quot;/usr/local/opt/llvm/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc<br><br>For compilers to find llvm you may need to <span class="hljs-built_in">set</span>:<br>  <span class="hljs-built_in">export</span> LDFLAGS=<span class="hljs-string">&quot;-L/usr/local/opt/llvm/lib&quot;</span><br>  <span class="hljs-built_in">export</span> CPPFLAGS=<span class="hljs-string">&quot;-I/usr/local/opt/llvm/include&quot;</span><br></code></pre></td></tr></table></figure><p>感觉修改环境变量太麻烦了，于是……</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>在编译项目使用的 CMakeLists 中添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">SET(LLVM_DIR /usr/<span class="hljs-built_in">local</span>/opt/llvm/lib/cmake/llvm)<br>SET(CMAKE_PREFIX_PATH /usr/<span class="hljs-built_in">local</span>/opt/llvm/lib/cmake/)<br></code></pre></td></tr></table></figure><p>根据自己 llvm 的安装地址进行调整<br>编译成功<br>yeah ～</p>]]></content>
    
    
    <categories>
      
      <category>踩坑经历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>llvm</tag>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS安装python glove库踩坑经验</title>
    <link href="/2021/05/25/MacOS%E5%AE%89%E8%A3%85python-glove%E5%BA%93%E8%B8%A9%E5%9D%91%E7%BB%8F%E9%AA%8C/"/>
    <url>/2021/05/25/MacOS%E5%AE%89%E8%A3%85python-glove%E5%BA%93%E8%B8%A9%E5%9D%91%E7%BB%8F%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="MacOS-安装-python-glove-库踩坑经验"><a href="#MacOS-安装-python-glove-库踩坑经验" class="headerlink" title="MacOS 安装 python glove 库踩坑经验)"></a>MacOS 安装 python glove 库踩坑经验)</h1><h2 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h2><p>课程需要使用 glove 库，手上的 windows 电脑这两天又送修了，只能在 mac 上安装 python 的相关环境。其他倒是都没有问题，在使用<code>pip3 install glove-python</code>的时候碰到如下问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) ➜  ~ pip3 install glove-python<br>Collecting glove-python<br>  Using cached glove_python-0.1.0.tar.gz (263 kB)<br>Requirement already satisfied: numpy <span class="hljs-keyword">in</span> ./anaconda3/lib/python3.8/site-packages (from glove-python) (1.20.1)<br>Requirement already satisfied: scipy <span class="hljs-keyword">in</span> ./anaconda3/lib/python3.8/site-packages (from glove-python) (1.6.2)<br>Building wheels <span class="hljs-keyword">for</span> collected packages: glove-python<br>  Building wheel <span class="hljs-keyword">for</span> glove-python (setup.py) ... error<br>  ERROR: Command errored out with <span class="hljs-built_in">exit</span> status 1:<br>   <span class="hljs-built_in">command</span>: /Users/admin/anaconda3/bin/python -u -c <span class="hljs-string">&#x27;import sys, setuptools, tokenize; sys.argv[0] = &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;/private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/setup.py&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;; __file__=&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;/private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/setup.py&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;;f=getattr(tokenize, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;open&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;, open)(__file__);code=f.read().replace(&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;\r\n&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;\n&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;);f.close();exec(compile(code, __file__, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;exec&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;))&#x27;</span> bdist_wheel -d /private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-wheel-h9nj2cq8<br>       cwd: /private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/<br>  Complete output (16 lines):<br>  running bdist_wheel<br>  running build<br>  running build_py<br>  creating build<br>  creating build/lib.macosx-10.9-x86_64-3.8<br>  creating build/lib.macosx-10.9-x86_64-3.8/glove<br>  copying glove/__init__.py -&gt; build/lib.macosx-10.9-x86_64-3.8/glove<br>  copying glove/glove.py -&gt; build/lib.macosx-10.9-x86_64-3.8/glove<br>  copying glove/corpus.py -&gt; build/lib.macosx-10.9-x86_64-3.8/glove<br>  running build_ext<br>  building <span class="hljs-string">&#x27;glove.glove_cython&#x27;</span> extension<br>  creating build/temp.macosx-10.9-x86_64-3.8<br>  creating build/temp.macosx-10.9-x86_64-3.8/glove<br>  gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/admin/anaconda3/include -arch x86_64 -I/Users/admin/anaconda3/include -arch x86_64 -I/Users/admin/anaconda3/include/python3.8 -c glove/glove_cython.c -o build/temp.macosx-10.9-x86_64-3.8/glove/glove_cython.o -fopenmp -ffast-math -march=native<br>  clang: error: unsupported option <span class="hljs-string">&#x27;-fopenmp&#x27;</span><br>  error: <span class="hljs-built_in">command</span> <span class="hljs-string">&#x27;gcc&#x27;</span> failed with <span class="hljs-built_in">exit</span> status 1<br>  ----------------------------------------<br>  ERROR: Failed building wheel <span class="hljs-keyword">for</span> glove-python<br>  Running setup.py clean <span class="hljs-keyword">for</span> glove-python<br>  ERROR: Command errored out with <span class="hljs-built_in">exit</span> status 1:<br>   <span class="hljs-built_in">command</span>: /Users/admin/anaconda3/bin/python -u -c <span class="hljs-string">&#x27;import sys, setuptools, tokenize; sys.argv[0] = &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;/private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/setup.py&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;; __file__=&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;/private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/setup.py&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;;f=getattr(tokenize, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;open&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;, open)(__file__);code=f.read().replace(&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;\r\n&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;\n&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;);f.close();exec(compile(code, __file__, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;exec&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;))&#x27;</span> clean --all<br>       cwd: /private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5<br>  Complete output (6 lines):<br>  usage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]<br>     or: setup.py --<span class="hljs-built_in">help</span> [cmd1 cmd2 ...]<br>     or: setup.py --help-commands<br>     or: setup.py cmd --<span class="hljs-built_in">help</span><br><br>  error: option --all not recognized<br>  ----------------------------------------<br>  ERROR: Failed cleaning build dir <span class="hljs-keyword">for</span> glove-python<br>Failed to build glove-python<br>Installing collected packages: glove-python<br>    Running setup.py install <span class="hljs-keyword">for</span> glove-python ... error<br>    ERROR: Command errored out with <span class="hljs-built_in">exit</span> status 1:<br>     <span class="hljs-built_in">command</span>: /Users/admin/anaconda3/bin/python -u -c <span class="hljs-string">&#x27;import sys, setuptools, tokenize; sys.argv[0] = &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;/private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/setup.py&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;; __file__=&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;/private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/setup.py&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;;f=getattr(tokenize, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;open&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;, open)(__file__);code=f.read().replace(&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;\r\n&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;\n&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;);f.close();exec(compile(code, __file__, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;exec&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;))&#x27;</span> install --record /private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-record-xqhqx2mu/install-record.txt --single-version-externally-managed --compile --install-headers /Users/admin/anaconda3/include/python3.8/glove-python<br>         cwd: /private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/<br>    Complete output (8 lines):<br>    running install<br>    running build<br>    running build_py<br>    running build_ext<br>    building <span class="hljs-string">&#x27;glove.glove_cython&#x27;</span> extension<br>    gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/admin/anaconda3/include -arch x86_64 -I/Users/admin/anaconda3/include -arch x86_64 -I/Users/admin/anaconda3/include/python3.8 -c glove/glove_cython.c -o build/temp.macosx-10.9-x86_64-3.8/glove/glove_cython.o -fopenmp -ffast-math -march=native<br>    clang: error: unsupported option <span class="hljs-string">&#x27;-fopenmp&#x27;</span><br>    error: <span class="hljs-built_in">command</span> <span class="hljs-string">&#x27;gcc&#x27;</span> failed with <span class="hljs-built_in">exit</span> status 1<br>    ----------------------------------------<br>ERROR: Command errored out with <span class="hljs-built_in">exit</span> status 1: /Users/admin/anaconda3/bin/python -u -c <span class="hljs-string">&#x27;import sys, setuptools, tokenize; sys.argv[0] = &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;/private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/setup.py&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;; __file__=&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;/private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/setup.py&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;;f=getattr(tokenize, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;open&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;, open)(__file__);code=f.read().replace(&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;\r\n&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;\n&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;);f.close();exec(compile(code, __file__, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;exec&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;))&#x27;</span> install --record /private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-record-xqhqx2mu/install-record.txt --single-version-externally-managed --compile --install-headers /Users/admin/anaconda3/include/python3.8/glove-python Check the logs <span class="hljs-keyword">for</span> full <span class="hljs-built_in">command</span> output.<br><br></code></pre></td></tr></table></figure><p>主要报错就是<code>command &#39;gcc&#39; failed with exit status 1</code></p><h2 id="踩坑-1-安装-gcc"><a href="#踩坑-1-安装-gcc" class="headerlink" title="踩坑 1 安装 gcc"></a>踩坑 1 安装 gcc</h2><p>因为报错是 gcc 的 error，发现电脑上并没有安装 gcc，于是<code>brew install gcc</code>安装得到 gcc 11.1.0<br>之后出现报错<code>clang: error: unsupported option &#39;-fopenmp&#39;</code>，故再去安装 clang-omp，报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">Error: No available formula with the name <span class="hljs-string">&quot;clang-omp&quot;</span><br>==&gt; Searching <span class="hljs-keyword">for</span> a previously deleted formula (<span class="hljs-keyword">in</span> the last month)...<br>Error: No previously deleted formula found.<br>==&gt; Searching <span class="hljs-keyword">for</span> similarly named formulae...<br>==&gt; Searching <span class="hljs-built_in">local</span> taps...<br>Error: No similarly named formulae found.<br>==&gt; Searching taps...<br>==&gt; Searching taps on GitHub...<br>Error: No formulae found <span class="hljs-keyword">in</span> taps.<br></code></pre></td></tr></table></figure><p>好家伙，原来 clang-omp 被迁移到了 llvm（这实在太麻烦了，违背作者的懒狗原则，故放弃）</p><h2 id="踩坑-2-试图舍近求远使用-anaconda"><a href="#踩坑-2-试图舍近求远使用-anaconda" class="headerlink" title="踩坑 2 试图舍近求远使用 anaconda"></a>踩坑 2 试图舍近求远使用 anaconda</h2><p>看到 stackoverflow 上有朋友说 glove 只支持 3.5 以下的 python，低头一看自己是个 3.7，于是寻求包管理工具的帮助。<br>先是去<code>brew install pyenv</code>，可怜地发现已经不支持新版的 osx 了，只能卑微向 anaconda 低头。</p><p>以前使用过 anaconda 的管理工具，但是觉得体量过大，一直很抗拒安装。但事已至此，希望 conda 能救一条老命。<br>安装 anaconda bash 的教程网上很多，主要问题出在了镜像源……</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">UnavailableInvalidChannel: The channel is not accessible or is invalid.<br></code></pre></td></tr></table></figure><p>好家伙一直以来用的清华镜像源似乎出现了问题，一搜发现<br><img src="https://raw.githubusercontent.com/MiracleZeroPenguin/images/main/img/20210525154924980.png" alt="在这里插入图片描述"><br>替换成中科大的镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/osx-64<br>conda config --add https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/osx-64<br></code></pre></td></tr></table></figure><p>好嘛，再次试图 install glove</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  ~ conda install python-glove<br>Collecting package metadata (current_repodata.json): <span class="hljs-keyword">done</span><br>Solving environment: failed with initial frozen solve. Retrying with flexible solve.<br>Collecting package metadata (repodata.json): <span class="hljs-keyword">done</span><br>Solving environment: failed with initial frozen solve. Retrying with flexible solve.<br><br>PackagesNotFoundError: The following packages are not available from current channels:<br><br>  - python-glove<br><br>Current channels:<br><br>  - https://mirrors.ustc.edu.cn/anaconda/pkgs/free/osx-64<br>  - https://mirrors.ustc.edu.cn/anaconda/pkgs/free/noarch<br>  - https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/osx-64<br>  - https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/noarch<br>  - https://repo.anaconda.com/pkgs/main/osx-64<br>  - https://repo.anaconda.com/pkgs/main/noarch<br>  - https://repo.anaconda.com/pkgs/r/osx-64<br>  - https://repo.anaconda.com/pkgs/r/noarch<br><br>To search <span class="hljs-keyword">for</span> alternate channels that may provide the conda package you<span class="hljs-string">&#x27;re</span><br><span class="hljs-string">looking for, navigate to</span><br><span class="hljs-string"></span><br><span class="hljs-string">    https://anaconda.org</span><br><span class="hljs-string"></span><br><span class="hljs-string">and use the search bar at the top of the page.</span><br></code></pre></td></tr></table></figure><p>查一查发现镜像源里根本没有 glove 这个库（也有可能是懒狗作者的操作不太正常）</p><h2 id="换-github-源"><a href="#换-github-源" class="headerlink" title="换 github 源"></a>换 github 源</h2><p>继续在 csdn/stackoverflow 上寻找可能的解决方案，发现 glove 的安装在很多 windows 电脑上可能出现问题，但 macos 的解决方案基本没有……<br>参考了一位博主在 windows 上的解决方案（<a href="https://blog.csdn.net/weixin_45072810/article/details/109783520）">https://blog.csdn.net/weixin_45072810/article/details/109783520）</a><br>现在似乎是成功安装了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) ➜  ~ pip3 install https://github.com/JonathanRaiman/glove/archive/master.zip<br>Collecting https://github.com/JonathanRaiman/glove/archive/master.zip<br>  Downloading https://github.com/JonathanRaiman/glove/archive/master.zip<br>     \ 5.7 kB 8.9 MB/s<br>Requirement already satisfied: cython <span class="hljs-keyword">in</span> ./anaconda3/lib/python3.8/site-packages (from glove==1.0.1) (0.29.23)<br>Requirement already satisfied: numpy <span class="hljs-keyword">in</span> ./anaconda3/lib/python3.8/site-packages (from glove==1.0.1) (1.20.1)<br>Building wheels <span class="hljs-keyword">for</span> collected packages: glove<br>  Building wheel <span class="hljs-keyword">for</span> glove (setup.py) ... <span class="hljs-keyword">done</span><br>  Created wheel <span class="hljs-keyword">for</span> glove: filename=glove-1.0.1-py3-none-any.whl size=4998 sha256=333928882f3857f80c341cdc50829d89e47fc7dcd58858ab03f5a68df490484d<br>  Stored <span class="hljs-keyword">in</span> directory: /private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-ephem-wheel-cache-nnihzarf/wheels/1c/f6/cf/371de84d071993d3402708a47a204d3022675d5761f8bf4b62<br>Successfully built glove<br>Installing collected packages: glove<br>Successfully installed glove-1.0.1<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>踩坑过于严重……</p>]]></content>
    
    
    <categories>
      
      <category>踩坑经历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
      <tag>glove</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计量经济学 知识点汇总</title>
    <link href="/2020/08/31/%E8%AE%A1%E9%87%8F%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <url>/2020/08/31/%E8%AE%A1%E9%87%8F%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<object data="/pdfs/计量经济学.pdf" type="application/pdf" width="100%" height="877px">]]></content>
    
    
    <categories>
      
      <category>一些课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>金融</tag>
      
      <tag>课程笔记</tag>
      
      <tag>计量经济学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学及其应用课程复习Kenneth H.Rosen</title>
    <link href="/2020/08/24/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E8%AF%BE%E7%A8%8B%E5%A4%8D%E4%B9%A0Kenneth-H-Rosen/"/>
    <url>/2020/08/24/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E8%AF%BE%E7%A8%8B%E5%A4%8D%E4%B9%A0Kenneth-H-Rosen/</url>
    
    <content type="html"><![CDATA[<h1 id="离散数学及其应用课程笔记"><a href="#离散数学及其应用课程笔记" class="headerlink" title="离散数学及其应用课程笔记"></a>离散数学及其应用课程笔记</h1><h2 id="chap1-The-Foundations-Logic-and-Proofs"><a href="#chap1-The-Foundations-Logic-and-Proofs" class="headerlink" title="chap1 The Foundations: Logic and Proofs"></a>chap1 The Foundations: Logic and Proofs</h2><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>proposition</td><td>命题</td><td>equivalence</td><td>等价式</td></tr><tr><td>predicate</td><td>谓词</td><td>quantifier</td><td>量词</td></tr><tr><td>inference</td><td>推理</td><td>negation</td><td>否定 NOT$\lnot$</td></tr><tr><td>conjunction</td><td>合取 AND$\land$</td><td>Disjunction</td><td>析取 OR$\lor$</td></tr><tr><td>Exclusive or</td><td>异或 XOR$\oplus$</td><td>Implication</td><td>IF-THEN$\rightarrow$</td></tr><tr><td>Biconditional</td><td>IF AND ONLY IF$\leftrightarrow$</td><td>hypothesis</td><td>假设</td></tr><tr><td>antecedent</td><td>前件</td><td>premise</td><td>前提</td></tr><tr><td>conclusion</td><td>结论</td><td>consequence</td><td>后件</td></tr><tr><td>converse</td><td>逆</td><td>contrapositive</td><td>逆否</td></tr><tr><td>inverse</td><td>反</td><td>bitwise</td><td>逐位</td></tr><tr><td>knight</td><td>骑士</td><td>knave</td><td>无赖</td></tr><tr><td>Tautologies</td><td>永真式</td><td>Contradictions</td><td>矛盾式</td></tr><tr><td>Contingencies</td><td>可能式</td><td>Normal Forms</td><td>范式</td></tr><tr><td>Dual</td><td>对偶式</td><td>Pierce arrow</td><td>或非$\downarrow$</td></tr><tr><td>Sheffer stroke</td><td>与非$</td><td>$</td><td>satisfiable</td><td></td></tr><tr><td>DNF</td><td>析取范式</td><td>CNF</td><td>合取范式</td></tr><tr><td>clause</td><td>子句</td><td>domain</td><td>论域</td></tr><tr><td>Universal Quantifier</td><td>全称量词$\forall$</td><td>Existential Quantifier</td><td>存在量词$\exists$</td></tr><tr><td>counterexample</td><td>反例</td><td>Uniqueness Quantifier</td><td>唯一性量词$\exists$!</td></tr><tr><td>scope</td><td>（变量的）作用域</td><td>nested</td><td>嵌套的</td></tr><tr><td>argument</td><td>论证</td><td>proof</td><td>证明</td></tr><tr><td>theorem</td><td>定理</td><td>axioms</td><td>公理</td></tr><tr><td>lemma</td><td>引理</td><td>corollary</td><td>推论</td></tr><tr><td></td><td>猜想</td><td>trivial</td><td>平凡证明</td></tr><tr><td>vacuous proof</td><td>空证明</td><td>rational number</td><td>有理数</td></tr><tr><td>without loss of generality</td><td>不失一般性</td><td></td></tr></tbody></table></div><ul><li>异或</li></ul><div class="table-container"><table><thead><tr><th>$p$</th><th>$q$</th><th>$p\oplus q$</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>F</td></tr><tr><td>T</td><td>F</td><td>T</td></tr><tr><td>F</td><td>T</td><td>T</td></tr><tr><td>F</td><td>F</td><td>F</td></tr></tbody></table></div><ul><li><p>IF p THEN q</p><p>p implies q</p><p>p only if q=q if p</p><p>q when p</p><p>q whenever p</p><p>q follows from p</p><p>p is sufficient for q 充分</p><p>q is necessary for p 必要</p><p>q unless $\lnot$p</p></li><li><p>逆、逆否、反</p></li></ul><div class="table-container"><table><thead><tr><th>符号</th><th>含义</th><th>定义</th></tr></thead><tbody><tr><td>$q\rightarrow p$</td><td>is the <strong>converse </strong>of $p\rightarrow q$</td><td>逆(左右颠倒)</td></tr><tr><td>$\lnot q\rightarrow \lnot p$</td><td>is the <strong>contrapositive</strong> of $p\rightarrow q$</td><td>逆否(与原命题等价)</td></tr><tr><td>$\lnot p\rightarrow \lnot q$</td><td>is the <strong>inverse</strong> of $p\rightarrow q$</td><td>反</td></tr></tbody></table></div><ul><li>优先级</li></ul><div class="table-container"><table><thead><tr><th>operator</th><th>precedence</th></tr></thead><tbody><tr><td>$\lnot$</td><td>1</td></tr><tr><td>$\land$</td><td>2</td></tr><tr><td>$\lor$</td><td>3</td></tr><tr><td>$\rightarrow$</td><td>4</td></tr><tr><td>$\leftrightarrow$</td><td>5</td></tr></tbody></table></div><ul><li><p>对偶式</p><p>$S=(p\lor \lnot q)\land r\land T$</p><p>$S^*=(p\land \lnot q)\lor r\lor F$</p><p>即所有 and 变成 or，所有 or 变成 and，所有 T 变成 F，所有 F 变成 T</p><p>$s\Leftrightarrow t$ if and only if $s^<em>\Leftrightarrow t^</em>$</p></li><li><p>功能完备符号：</p><p>$\{\lnot, \lor\}$、$\{\lnot, \land\}$、$\{|\}$、$\{\downarrow\}$</p></li><li><p>析取 DNF 范式：$(A_1\land A_2)\lor B_1\lor (C_1\land C_2)$</p><p>合取 CNF 范式：$(A_1\lor A_2)\land B_1\land (C_1\lor C_2)$</p></li><li><p>量词优先级比逻辑运算符更高</p></li><li><p>命题中的变量必须是 Bound variable（被赋值的或被量词约束的）</p></li></ul><p><img src="https://raw.githubusercontent.com/MiracleZeroPenguin/images/main/img/watermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pcmFjbGVfemVybw%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70.png" alt="在这里插入图片描述"></p><div class="table-container"><table><thead><tr><th></th><th></th><th>corresponding tautology</th></tr></thead><tbody><tr><td>Modus Ponens</td><td>假言推理</td><td>$(p\land(p\rightarrow q))\rightarrow q$</td></tr><tr><td>Modus Tollens</td><td>取拒式</td><td>$(\lnot q\land(p\rightarrow q))\rightarrow \lnot p$</td></tr><tr><td>Hypothetical Syllogism</td><td>假言三段论</td><td>$((p\rightarrow q)\land(q\rightarrow r))\rightarrow(p\rightarrow r)$</td></tr><tr><td>Disjunctive Syllogism</td><td>析取三段论</td><td>$(\lnot p\land(p\lor q))\rightarrow q$</td></tr><tr><td>Addition</td><td>附加律</td><td>$p\rightarrow (p\lor q)$</td></tr><tr><td>Simplification</td><td>简化律</td><td>$(p\land q)\rightarrow p$</td></tr><tr><td>Conjunction</td><td>合取律</td><td>$((p)\land(q))\rightarrow(p\land q)$</td></tr><tr><td>Resolution</td><td>消解律</td><td>$((\lnot p\lor r)\land(p\lor q))\rightarrow (r\lor q)$</td></tr></tbody></table></div><ul><li><p>平凡证明：$p\rightarrow T$ is $T$</p><p>空证明：$F\rightarrow q$ is $T$</p></li></ul><hr><h2 id="chap2-Basic-Structures-Sets-Functions-Sequences-Sums-and-Matrices"><a href="#chap2-Basic-Structures-Sets-Functions-Sequences-Sums-and-Matrices" class="headerlink" title="chap2 Basic Structures: Sets, Functions, Sequences, Sums, and Matrices"></a>chap2 Basic Structures: Sets, Functions, Sequences, Sums, and Matrices</h2><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>Sequences</td><td>序列</td><td>Summation</td><td>求和</td></tr><tr><td>Cardinality</td><td>基数</td><td>paradox</td><td>悖论</td></tr><tr><td>Power Set</td><td>幂集</td><td>tuple</td><td>有序元组</td></tr><tr><td>Cartesian Product</td><td>笛卡尔积</td><td>union</td><td>集合的并$\cup$</td></tr><tr><td>intersection</td><td>集合的交$\cap$</td><td>complement</td><td>集合的补$\bar A$</td></tr><tr><td>Inclusion-Exclusion</td><td>容斥原理</td><td>symmetric difference</td><td>对称差</td></tr><tr><td>Domain</td><td>定义域</td><td>Codomain</td><td>陪域、值域</td></tr><tr><td>Image</td><td>像</td><td>Preimage</td><td>原像</td></tr><tr><td>Injection</td><td>单射</td><td>Surjection</td><td>满射</td></tr><tr><td>Bijection</td><td>双射</td><td>Inverse Function</td><td>反函数</td></tr><tr><td>progression</td><td>级数</td><td>Recurrence Relations</td><td>递推关系</td></tr><tr><td>lexicographic</td><td>字典序</td><td>computable</td><td>可计算的</td></tr><tr><td>rectangular</td><td>矩形的</td><td>identity matrix</td><td>单位矩阵</td></tr><tr><td>transpose</td><td>转置</td><td>symmetric</td><td>对称的</td></tr></tbody></table></div><ul><li><p>集合的基数记为$\vert A\vert$，即集合中元素的个数</p></li><li><p>幂集$\mathcal{P}(A)$：集合中所有子集组成的集合，一个 n 个元素的集合的幂集有$2^n$个元素</p></li><li><p>两个元素的元组被称为 ordered pairs 序偶</p></li><li><p>笛卡尔积：$A\times B=\{(a,b)\vert a\in A \land b\in B\}$</p></li><li><p>对称差：$A\oplus B=(A-B)\cup(B-A)$</p></li><li><p>反函数的前提是原函数是双射的</p></li><li><p>$f\circ g(x)=f(g(x))$</p></li><li><p>$n!\sim \sqrt{2\pi n}(\frac n e)^n$</p></li></ul><div class="table-container"><table><thead><tr><th>Sum</th><th>Closed Form</th></tr></thead><tbody><tr><td>$\sum_{k=0}^n ar^k$</td><td>$\frac{ar^{n+1}-a}{r-1}, r\neq 1$</td></tr><tr><td>$\sum_{k=1}^n k$</td><td>$\frac{n(n+1)}2$</td></tr><tr><td>$\sum_{k=1}^n k^2$</td><td>$\frac{n(n+1)(n+2)}6$</td></tr><tr><td>$\sum_{k=1}^n k^3$</td><td>$\frac{n^2(n+1)^2}4$</td></tr><tr><td>$\sum_{k=0}^\infty x^k, \vert x\vert &lt;1$</td><td>$\frac 1{1-x}$</td></tr><tr><td>$\sum_{k=1}^\infty kx^{k-1}$</td><td>$\frac 1 {(1-x)^2}$</td></tr></tbody></table></div><ul><li><p>可数集：基是有限的或跟正整数集相同，则是可数的</p></li><li><p>一个无限且可数的集合的基被称为$\aleph_0$（可以跟正整数集建立一个一一对应的映射）</p></li><li><p>实数集的基为$\aleph_1$</p></li><li><p>一个集合的幂集的基，一定大于原集合的基</p></li></ul><hr><h2 id="chap3-Algorithms"><a href="#chap3-Algorithms" class="headerlink" title="chap3 Algorithms"></a>chap3 Algorithms</h2><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>Brute-Force</td><td>暴力算法</td><td>Tractable</td><td>易解</td></tr><tr><td>Intractable</td><td>难解</td><td>polynomial</td><td>多项式</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>Notation</th><th>Explaination</th></tr></thead><tbody><tr><td>Big-O:$f(x)$ is $O(g(x))$</td><td>$\vert f(x)\vert\leq C\vert g(x)\vert$</td></tr><tr><td>Big-Omega:$f(x)$ is $\Omega(g(x))$</td><td>$\vert f(x)\vert\geq C\vert g(x)\vert$</td></tr><tr><td>Big-Theta:$f(x)$ is $\Theta(g(x))$</td><td>$O(g(x)) \&amp; \Omega(g(x))$</td></tr></tbody></table></div><ul><li><p>NP 类：可以在多项式复杂度内被 check，但不能在多项式复杂度内解决</p></li><li><p>NP 完全类：if you find a polynomial time algorithm for one member of the class, it can be used to solve all the problems in the class</p></li></ul><hr><h2 id="chap5-Induction-and-recursion"><a href="#chap5-Induction-and-recursion" class="headerlink" title="chap5 Induction and recursion"></a>chap5 Induction and recursion</h2><ul><li>数学归纳法:$P(1)\land \forall k(P(k)\to P(k+1))\to \forall nP(n)$<ul><li>BASIC STEP:</li><li>INDUCTIVE STEP:</li><li>Hence,…</li></ul></li><li>每个简单多边形都会把一个区域变为内部区域和外部区域</li><li>任何一个简单多边形都有其内部的对角线（lemma）</li><li>良序性（正整数体系的公理）：A set is well ordered if every subset has a least element.<ul><li>数学归纳法和强归纳法与良序性的成立是等价的</li></ul></li></ul><hr><h2 id="chap6-Counting"><a href="#chap6-Counting" class="headerlink" title="chap6 Counting"></a>chap6 Counting</h2><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>Pigeonhole</td><td>鸽巢</td><td>Permutation</td><td>排列</td></tr><tr><td>Combination</td><td>组合</td><td>Binomial Coefficient</td><td>二项系数</td></tr><tr><td>distinguishable</td><td>可分辨的</td><td></td></tr></tbody></table></div><ul><li><p>排列：$P(n,r)=\frac{n!}{(n-r)!}$</p></li><li><p>组合：$C(n,r)=\frac{n!}{(n-r)! r!}$</p></li><li><p>二项式定理：$(x+y)^n=\Sigma_{j=0}^n \begin{pmatrix} n\\j \end{pmatrix}x^{n-j}y^j$</p></li><li><p>$\Sigma_{k=1}^n(-1)^k \begin{pmatrix}n\\k\end{pmatrix}=0$</p></li><li><p>帕斯卡定理：$\begin{pmatrix}n+1\\k\end{pmatrix}=\begin{pmatrix}n\\k-1\end{pmatrix}+\begin{pmatrix}n\\k\end{pmatrix}$</p></li><li><p>Vandermonde’s：$\begin{pmatrix}m+n\\r\end{pmatrix}=\Sigma_{k=0}^r\begin{pmatrix}m\\r-k\end{pmatrix}\begin{pmatrix}n\\k\end{pmatrix}$</p><ul><li>推论：$\begin{pmatrix}2n\\n\end{pmatrix}=\Sigma_{k=0}^n\begin{pmatrix}n\\k\end{pmatrix}^2$</li></ul></li><li><p>有 n 种饼干，取出共 r 个饼干的组合数量为：$C(n+r-1,r)$</p></li><li><p>n 个物体，k 个盒子：</p></li></ul><div class="table-container"><table><thead><tr><th>n 个物体</th><th>r 个盒子</th><th>数量</th></tr></thead><tbody><tr><td>不同</td><td>不同</td><td>$\frac{n!}{n_1!n_2!··n_k!}$</td></tr><tr><td>相同</td><td>不同</td><td>$C(n+r-1,n-1)$</td></tr><tr><td>不同</td><td>相同</td><td>—</td></tr><tr><td>相同</td><td>相同</td><td>—</td></tr></tbody></table></div><hr><h2 id="chap8-Advanced-Counting-Techniques"><a href="#chap8-Advanced-Counting-Techniques" class="headerlink" title="chap8 Advanced Counting Techniques"></a>chap8 Advanced Counting Techniques</h2><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>Homogeneous</td><td>齐次的</td><td>Nonhomogeneous</td><td>非齐次的</td></tr><tr><td>generating function</td><td>生成函数</td><td>Inclusion-Exclusion</td><td>容斥原理</td></tr><tr><td>Derangement</td><td>错位排序</td><td></td></tr></tbody></table></div><ul><li><p>degree：$a_n=a_{n-1}+a_{n-8}$的 degree 为 8</p><p>a recurrence relation of degree 8</p></li><li><p>Hanoi 汉诺塔（3 个柱子）：$H_n=2^n-1$</p></li><li><p>齐次：每个 x 都是 1 次方的</p></li><li><p>非齐次公式：</p><p>如果递推关系是为：$a_n=c_1a_{n-1}+c_2a_{a-2}+···+c_ka_{n-k}+F(n)$</p><p>非齐次项$F(n)$可以被记为$F(n)=(b_tn^t+b_{t-1}n^{t-1}+···+b_1n+b_0)s^n$</p><p>如果 s 是$a_n=c_1a_{n-1}+c_2a_{a-2}+···+c_ka_{n-k}$的一个根，m 为次数，最后的特解可以被记为：$f(n)=n^m(p_tn^t+p_{t-1}n^{t-1}+···+p_1n+p_0)s^n$</p><p>如果 s 不是是$a_n=c_1a_{n-1}+c_2a_{a-2}+···+c_ka_{n-k}$的一个根，最后的特解可以被记为：$f(n)=(p_tn^t+p_{t-1}n^{t-1}+···+p_1n+p_0)s^n$</p><blockquote><p>例如</p><hr><p>$a_n=6a_{n-1}-9a_{n-2}+F(n)$</p><p>$F(n)=(n^2+1)3^n$</p><p>则$m=2, s=3, f(n)=n^2(p_2n^2+p_1n+p_0)3^n $（s=3 为一个根）</p><hr><p>$a_n=6a_{n-1}-9a_{n-2}+F(n)$</p><p>$F(n)=n^22^n$</p><p>则$s=2, f(n)=(p_2n^2+p_1n+p_0)2^n $（s=2 不是一个根）</p></blockquote></li><li><p>分治算法复杂度：</p><p>$f(n)=af(n/b)+cn^d$</p><script type="math/tex; mode=display">f(n) \text{ is }\begin{cases}O(n^d)& \text{if}& a<b^d\\O(n^d\log n)& \text{if}& a=b^d\\O(n^{\log_ba})& \text{if}& a>b^d\end{cases}</script></li><li><p>生成函数：</p><script type="math/tex; mode=display">f(x)=\Sigma_{k=0}^\infty a_kx^k,g(x)=\Sigma_{k=0}^\infty b_kx^k</script><ol><li>$f(x)+g(x)=\Sigma_{k=0}^\infty(a_k+b_k)x^k$</li><li>$\alpha\cdot f(x)=\Sigma_{k=0}^\infty\alpha \cdot a_kx^k$</li><li>$x\cdot f’(x)=\Sigma_{k=0}^\infty k \cdot a_kx^k$</li><li>$f(\alpha x)=\Sigma_{k=0}^\infty \alpha^k\cdot a_k x^k$</li><li>$f(x)g(x)=\Sigma_{k=0}^\infty(\Sigma_{j=0}^k a_j b_{k-j}x^k)$</li></ol></li><li><p>广义二项式定理：</p><script type="math/tex; mode=display">\begin{pmatrix}u\\k\end{pmatrix}=\begin{cases}u(u-1)···(u-k+1)/k!& \text{if} &k>0\\1&\text{if} & k=0\end{cases}</script><script type="math/tex; mode=display">(1+x)^u=\Sigma_{k=0}^\infty\begin{pmatrix}u\\k\end{pmatrix}x^k</script><blockquote><p>例如</p><p>请找到$(1+x)^{-n}$的生成函数</p><hr><script type="math/tex; mode=display">\begin{aligned}(1+x)^{-n}&=\Sigma_{k=0}^{-n}\begin{pmatrix}-n\\k\end{pmatrix}x^k\\&=\Sigma_{k=0}^{-n}(-1)^kC(n+k-1,k)x^k\end{aligned}</script></blockquote></li></ul><p><img src="https://raw.githubusercontent.com/MiracleZeroPenguin/images/main/img/watermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pcmFjbGVfemVybw%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70-20211206191543634.png" alt="在这里插入图片描述"></p><ul><li>n 元素集合的错位排序个数：$D_n=n![1-\frac{1}{1!}+\frac 1{2!}-\frac 1{3!}+···+(-1)^n\frac 1 {n!}]$</li></ul><hr><h2 id="chap9-Relations"><a href="#chap9-Relations" class="headerlink" title="chap9 Relations"></a>chap9 Relations</h2><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>properties</td><td>性质</td><td>closure</td><td>闭包</td></tr><tr><td>reflexive</td><td>自反的</td><td>symmetric</td><td>对称的</td></tr><tr><td>antisymmetic</td><td>反对称的</td><td>transitive</td><td>可传递的</td></tr><tr><td>Composition</td><td>组合</td><td>diagonal</td><td>对角线上</td></tr><tr><td>Equivalence</td><td>等价</td><td>Congruence</td><td>同余</td></tr><tr><td>representive</td><td>代表元</td><td>partition</td><td>划分</td></tr><tr><td>partial ordering</td><td>偏序</td><td>hasse diagram</td><td>哈塞图</td></tr><tr><td>lattices</td><td>格</td><td>total order/linear order</td><td>全序/线序$\preccurlyeq$</td></tr><tr><td>chain</td><td>链</td><td>maximal</td><td>极大元</td></tr><tr><td>minimal</td><td>极小元</td><td>greatest element</td><td>最大元</td></tr><tr><td>least element</td><td>最小元</td><td>compatible</td><td>兼容的</td></tr></tbody></table></div><ul><li><p>集合的性质</p><ul><li><p>自反性 Reflexive</p><p>$(a,a)\in R$，$\forall x[x\in U\to(x,x)\in R]$</p><p>空集上的空关系是自反的</p></li><li><p>对称性 Symmetric</p><p>$\forall x \forall y[(x,y)\in R \to (y,x)\in R]$</p></li><li><p>反对称性 Antisymmetric</p><p>$\forall x \forall y[(x,y)\in R\land(y,x)\in R \to x=y]$</p><p>不存在除了自反之外的对称关系</p></li><li><p>传递性 Transitive</p><p>$\forall x \forall y\forall z [(x,y)\in R \land (y,z)\in R\to (x,z)\in R]$</p></li></ul></li><li><p>$R^n\subset R\leftrightarrow \text{R is transitive}$</p></li><li><p>逆关系：$R^{-1}=\{(a,b)|(b,a)\in R\}$</p></li><li><p>关系操作：</p><ul><li>$(R\cup S)^{-1}=R^{-1}\cup S^{-1}$</li><li>$(R\cap S)^{-1}=R^{-1}\cap S^{-1}$</li><li>$(\overline R)^{-1}=\overline{(R^{-1})}$</li><li>$(A\times B)^{-1}=B\times A$</li></ul></li><li><p>transitive closure：</p><p>连通关系 connectivity relation：$R^*=\cup _1 ^\infty R^n$</p><p>关系的传递闭包就是关系的连通关系$R^*=t(R)$</p></li><li><p>等价关系：自反、对称且传递</p><p>$a\text{~}b$</p></li><li><p>R 为集合 A 上的一个等价关系，则在集合 A 中与元素 a 相关的所有元素可以被表示为$[a]_R$（等价类）</p><script type="math/tex; mode=display">[a]_R=\{s|(a,s)\in R\}</script></li><li><p>代表元：等价类中的任何一个元素都可以被成为代表元</p></li><li><p>集合的划分：$pr(A)=\{A_i|i\in I\}$</p></li><li><p>$R_1$、$R_2$为 A 上的两个等价关系，则$R_1\cup R_2$是 A 上的自反、对称关系，$(R_1\cup R_2)^*$是自反、对称、传递关系即等价关系</p></li><li><p>偏序关系：自反、传递、==反对称==（分大小的不平等关系）</p><ul><li>$poset(S,\preccurlyeq)$：定义在集合 S 上的一个偏序关系</li><li>如果集合中任意两个元素都是可比的，则成为全序、线序，整个集合被称为一个链</li><li>良序：拥有最小元素</li><li>极小（大）元：没有一个小于它</li><li>最小（大）元：所有元素都大于等于它</li><li>格：任意一对元素都拥有最大上界和最小下界的偏序集，被称为一个格</li></ul></li></ul><hr><h2 id="chap10-Graphs"><a href="#chap10-Graphs" class="headerlink" title="chap10 Graphs"></a>chap10 Graphs</h2><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>vertice</td><td>顶点</td><td>edge</td><td>边</td></tr><tr><td>endpoint</td><td>端点</td><td>multigraph</td><td>多重图</td></tr><tr><td>pseudograph</td><td>伪图</td><td>adjacent</td><td>相邻顶点</td></tr><tr><td>incident</td><td>关联</td><td>pendant</td><td>悬挂</td></tr><tr><td>in degree</td><td>入度</td><td>out degree</td><td>出度</td></tr><tr><td>Bipartite</td><td>二分图</td><td>regular graph</td><td>正规图</td></tr><tr><td>proper subgraph</td><td>真子图</td><td>Isomorphism</td><td>同构</td></tr><tr><td>path</td><td>通路</td><td>connected component</td><td>连通部分</td></tr><tr><td>articulation point</td><td>割点</td><td>Approximation algorithm</td><td>近似算法</td></tr><tr><td>planer</td><td>平面图</td><td>region</td><td>区域</td></tr><tr><td>Elementary subdivision</td><td>初等细分</td><td>Homeomorphic</td><td>同胚</td></tr><tr><td>dual graph</td><td>对偶图</td><td>chromatic number</td><td>着色数</td></tr></tbody></table></div><ul><li>$G=(V,E)$</li><li><p>无向图分类：</p><ul><li>简单图：没有环，没有多重边</li><li>多重图：没有环，可以有多重边</li><li>伪图：可以有环和多重边</li></ul></li><li><p>有关图的术语：</p><ul><li>adjacent：两个顶点之间有边相连，则称这两个顶点相关联</li><li>incident with vertices u and v：这条边连接了顶点 u 和 v</li><li>loop：环</li><li>degree of a vertex 顶点的度：在无向图中即为有多少条边与这个点关联（==环算两个度==）<ul><li>$deg(v)=0$，v is isolated</li><li>$deg(v)=1$，v is pendant</li></ul></li><li>无向图中，$\Sigma_{v\in V}deg(v)=2e$<ul><li>无向图中，偶数个顶点是奇数个度</li></ul></li><li>有向图中，一条边的起点 initial vertex，终点 terminal vertex<ul><li>$\Sigma_{v\in V}deg^+(v)=\Sigma_{v\in V}deg^-(v)=E$</li></ul></li></ul></li><li>一些特殊的图：<ul><li>完全图$K_n$：每对顶点之间有且只有一条边相连</li><li>圈图$C_n$：n 个顶点围成一个圈首尾相连</li><li>轮图$W_n$：在圈图中间加个点</li><li>立方图$Q_n$</li></ul></li><li>完全二分图$K_{mn}$:两组集合中每个点都与对面任意一个点相连</li><li>正规图：每个顶点的度都相同</li><li><p>induced subgraph 诱导子图：当且仅当子图中的边都在原图里，仅删除与子图中不存在的顶点相连的边</p></li><li><p>Incidence matrices 关联矩阵：纵坐标为顶点，横坐标为边，针对无向图</p></li><li>path is simple：没有一条边被重复的通路<ul><li>单个顶点的通路长度为 0</li></ul></li><li>图的连通：任意一对顶点间都有 path</li><li>割点：关节点，删去后会增加 connected components 的个数</li><li>割边/桥：关节边，删去后会增加 connected components 的个数</li><li><p>任何一个强连通的有向图都是弱连通的，可以把弱连通看作无向图，而强连通指有向图每对顶点间都双向连通</p><ul><li>strongly connected components/strong components：有向图中的最大强连接子图</li></ul></li><li><p>欧拉回路：遍历所有的边，每条边只访问一遍</p><ul><li>区别欧拉通路和欧拉回路：是否要求回到原点</li><li>欧拉图：包含欧拉回路的图</li><li>对于无向图：<ul><li><u>==欧拉回路充要条件==：当且仅当每个顶点都是偶数个度</u></li><li><u>==欧拉通路充要条件==：当且仅当只有 2 个顶点是奇数个度</u></li></ul></li><li>对于有向图<ul><li><u>==欧拉回路==：弱连接+出度与入度相同</u></li><li><u>==欧拉通路==：弱连接+起点的出度多一个，终点的入度多一个</u></li></ul></li></ul></li><li><p>哈密尔顿问题：遍历所有点，每个点只访问一遍</p><ul><li>还有没充要条件</li><li>充分条件（满足条件则一定有，不满足也可能有）：<ul><li>狄拉克定理：$\forall v\in V, deg(v)\geq \frac n 2$则有哈密尔顿通路</li><li>欧尔定理：$\forall 不相邻顶点v,u\in V, deg(v)+deg(u)\geq n$</li></ul></li><li>必要条件（用于判断不是哈密尔顿）：<ul><li>连通图，每个顶点的度都必须大于等于 1</li><li>最多只有两个顶点的度是 1</li><li>如果一个顶点的度为 2，则两条边都为哈密尔顿回路的一部分</li><li>从顶点集合 V 中去掉一组顶点 S，则新图的连接部分数量&lt;=S 的个数</li></ul></li></ul></li><li><p>weighted graph 加权图：$G=(V,E,W)$</p></li><li><p>Dijkstra:寻找最短路径，要求所有路径都是正权重的</p><ul><li>iterative</li><li>$L_k(v)=\min\{L_{k-1}(v),L_{k-1}(u)+w(u,v)\}$</li><li>$O(n^2)$</li></ul></li><li><p>旅行商问题</p><ul><li>最短的哈密尔顿回路</li><li>近似算法</li></ul></li><li><p>平面图：可以画在平面上且边与边不交叉</p></li><li><p>区域 Region：包括有界区域和无界区域</p></li><li><p>==<strong>欧拉公式</strong>==：对于连通的平面简单图</p><script type="math/tex; mode=display">r=e-v+2</script><p>对于非平面图也可能成立</p></li><li><p>区域的度：区域边的总数（绕一圈的边的总数）</p><ul><li><p>推论 1：</p><script type="math/tex; mode=display">e\leq 3v-6,\text{if }v\geq 3</script><p>对于不连通的平面简单图也成立</p></li><li><p>推论 2：对于一个平面简单图，G 一定有一个顶点的度不超过 5</p></li><li><p>推论 3：对于一个平面简单图，如果任何一个回路的长度都大于 3，则$e\leq 2v-4$</p></li></ul></li><li><p>Kuratowski 定理</p><ul><li>初等细分：增加原有道路上的细分点</li><li>同胚：可以通过一系列的初等细分所获得的图</li><li>一个图是非平面的$\Leftrightarrow$包含一个与$K_{3,3}$或$K_5$同胚的子图</li></ul></li><li><p>着色问题</p><ul><li>地图的对偶图，相邻的区域间连线</li><li>等价于对偶图的顶点着色，使每条边上的两个顶点不同颜色</li><li>最少着色数记为$\chi(G)$</li><li>==四色定理==：一个<u>平面图</u>的着色数不超过 4</li></ul></li></ul><hr><h2 id="chap11-Trees"><a href="#chap11-Trees" class="headerlink" title="chap11 Trees"></a>chap11 Trees</h2><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>root</td><td>根</td><td>internal vertice</td><td>有孩子的节点</td></tr><tr><td>subtrees</td><td>子树</td><td>isomorphic</td><td>同构的</td></tr><tr><td>preorder</td><td>前序</td><td>inorder</td><td>中序</td></tr><tr><td>postorder</td><td>后序</td><td>spanning tree</td><td>生成树</td></tr><tr><td>backtracking</td><td>回溯</td><td></td></tr></tbody></table></div><ul><li>树：没有简单回路的连通无向图</li><li><p>无向图是一棵树$\Leftrightarrow$每两个顶点之间都有唯一的简单通路</p></li><li><p>满 m 叉树：每个中间节点都有 m 个孩子</p></li><li><p>树的同构：</p><ul><li>根树的同构（有向图的同构）</li><li>无根树的同构（无向图的同构）</li></ul></li><li><p>树的性质：</p><ul><li>n 个顶点的树就有 n-1 条边</li><li>一个有 i 个内节点的满 m 叉树有$mi+1$和顶点</li><li>树一定是个二分图</li></ul></li><li><p>二叉搜索树</p><ul><li>插入一个新节点，最多发生$\lceil \log(n+1)\rceil$次比较</li></ul></li><li><p>决策树</p><ul><li>由一系列节点生成一个解</li></ul></li><li><p>prefix code</p><ul><li>huffman code</li></ul></li><li><p>生成树</p><ul><li>一个简单图是连通的$\Leftrightarrow$包含一个生成树</li><li>DFS 深度优先搜索（回溯）会形成一个根树</li><li>BFS 广度优先搜索</li></ul></li><li><p>最小生成树</p><ul><li>Prim 算法：找与已经连接的生成树距离最短的点，直到完全连通，$O(E\log(V))$</li><li>Kruskal 算法：找现存的最短边（不会产生回路），直到完全联通，$O(V\log(E))$</li></ul></li><li><p>树：没有简单回路的连通无向图</p></li><li><p>无向图是一棵树$\Leftrightarrow$每两个顶点之间都有唯一的简单通路</p></li><li><p>满 m 叉树：每个中间节点都有 m 个孩子</p></li><li><p>树的同构：</p><ul><li>根树的同构（有向图的同构）</li><li>无根树的同构（无向图的同构）</li></ul></li><li><p>树的性质：</p><ul><li>n 个顶点的树就有 n-1 条边</li><li>一个有 i 个内节点的满 m 叉树有$mi+1$和顶点</li><li>树一定是个二分图</li></ul></li><li><p>二叉搜索树</p><ul><li>插入一个新节点，最多发生$\lceil \log(n+1)\rceil$次比较</li></ul></li><li><p>决策树</p><ul><li>由一系列节点生成一个解</li></ul></li><li><p>prefix code</p><ul><li>huffman code</li></ul></li><li><p>生成树</p><ul><li>一个简单图是连通的$\Leftrightarrow$包含一个生成树</li><li>DFS 深度优先搜索（回溯）会形成一个根树</li><li>BFS 广度优先搜索</li></ul></li><li><p>最小生成树</p><ul><li>Prim 算法：找与已经连接的生成树距离最短的点，直到完全连通，$O(E\log(V))$</li><li>Kruskal 算法：找现存的最短边（不会产生回路），直到完全联通，$O(V\log(E))$</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>一些课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课程笔记</tag>
      
      <tag>cs</tag>
      
      <tag>离散数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构基础fds 课程笔记</title>
    <link href="/2020/07/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80fds-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/07/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80fds-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="DataStructure-课程笔记-数据结构基础-fds"><a href="#DataStructure-课程笔记-数据结构基础-fds" class="headerlink" title="DataStructure 课程笔记 数据结构基础 fds"></a>DataStructure 课程笔记 数据结构基础 fds</h1><h2 id="chap02-Algorithm-Analysis"><a href="#chap02-Algorithm-Analysis" class="headerlink" title="chap02 Algorithm Analysis"></a>chap02 Algorithm Analysis</h2><div class="table-container"><table><thead><tr><th>$T(N)=O(f(N))$</th><th>$T(N)\leq c f(N)$</th></tr></thead><tbody><tr><td>$T(N)=\Omega(f(N))$</td><td>$T(N)\geq c f(N)$</td></tr><tr><td>$T(N)=\Theta(f(N))$</td><td>$T(N)= c f(N)$</td></tr><tr><td>$T(N)=o(f(N))$</td><td>$T(N)=O(f(N))$ and $T(N)\neq\Theta(f(N))$</td></tr></tbody></table></div><ul><li>$\log^kN=O(N)$: algorithm grows very slowly.</li></ul><h2 id="chap03-ADT-List"><a href="#chap03-ADT-List" class="headerlink" title="chap03 ADT-List"></a>chap03 ADT-List</h2><ul><li><p>ADT 抽象数据类型</p></li><li><p>The cursor implementation is usually significantly faster because of the lack of memory management routines.</p></li><li><p>链表：先放在前，后放在后</p></li><li><p>Add Two Polynomials</p><ul><li>多项式加法函数</li></ul></li><li><p>Reverse Linked List</p><ul><li>单向链表转置</li></ul></li><li><p>stack：后放在上</p><ul><li><p>A Pop on an empty stack is an error in the stack ADT.</p></li><li><p>Push on a full stack is an implementation error but not an ADT error.</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">StackRecord</span> &#123;</span><br><span class="hljs-keyword">int</span> Capacity ; <span class="hljs-comment">/* size of stack */</span><br><span class="hljs-keyword">int</span> TopOfStack; <span class="hljs-comment">/* the top pointer */</span><br><span class="hljs-comment">/* ++ for push, -- for pop, -1 for empty stack */</span><br>ElementType *Array; <span class="hljs-comment">/* array for stack elements */</span><br> &#125; ;<br><br></code></pre></td></tr></table></figure></li><li><p>The stack model must be well encapsulated（封装）</p></li><li><p>表达式</p></li></ul><div class="table-container"><table><thead><tr><th>infix 中序</th><th>$a+b*c-d/e$</th></tr></thead><tbody><tr><td>prefix 前序</td><td><script type="math/tex">-+a*bc/de</script></td></tr><tr><td>postfix 后序</td><td>$abc*+de/-$</td></tr></tbody></table></div><ul><li><p>尾递归一定能变成循环</p></li><li><p>queue：两边开，先入先出，后入后出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">QueueRecord</span> &#123;</span><br><span class="hljs-keyword">int</span> Capacity ;   <span class="hljs-comment">/* max size of queue */</span><br><span class="hljs-keyword">int</span> Front;  <span class="hljs-comment">/* 队列头预制0，指向最老元素 */</span><br><span class="hljs-keyword">int</span> Rear;   <span class="hljs-comment">/* 队列尾预制-1，指向最新元素 */</span><br><span class="hljs-keyword">int</span> Size;  <span class="hljs-comment">/* Optional - the current size of queue */</span><br>ElementType *Array;    <span class="hljs-comment">/* array for queue elements */</span><br> &#125; ;<br></code></pre></td></tr></table></figure></li><li><p>循环队列需要保留一个空位</p></li><li><p>Evaluate Postfix Expression</p><ul><li>后序表达式计算</li></ul></li><li><p>Deque</p><ul><li>双向队列</li></ul></li><li><p>Pop Sequence</p><ul><li>检查是否可以这样 pop</li></ul></li></ul><h2 id="chap04-Binary-Tree-amp-Search-Tree"><a href="#chap04-Binary-Tree-amp-Search-Tree" class="headerlink" title="chap04 Binary Tree&amp; Search Tree"></a>chap04 Binary Tree&amp; Search Tree</h2><h3 id="4-1-Binary-Tree"><a href="#4-1-Binary-Tree" class="headerlink" title="4.1 Binary Tree"></a>4.1 Binary Tree</h3><ul><li>There are $N-1$ edges in a tree with $N$ nodes.</li><li>degree<ul><li>of node: 有几个儿子</li><li>of tree: 树中拥有对多个儿子的节点的 degree</li></ul></li><li>length of path: 一路上有多少条边</li><li>$Depth(root) = 0$</li><li>$Height(leaf) = 0$</li><li>第$i$层最多有节点$2^{i-1}$个</li><li>深度为$k$的树最多有节点$2^k-1$个</li><li>threaded binary trees 搜索二叉树，前序/中序/后续<ul><li>左指针指向遍历的前一个，右指针指向后一个</li></ul></li></ul><h3 id="4-2-Search-Tree"><a href="#4-2-Search-Tree" class="headerlink" title="4.2 Search Tree"></a>4.2 Search Tree</h3><ul><li>Binary Search Tree：左小右大，互不相同</li><li>Isomorphic<ul><li>树的对称</li></ul></li><li>traversal<ul><li>O(N)</li><li>前序 preorder</li><li>中序 inorder</li><li>后序 postorder</li><li>层级 level</li></ul></li><li>ZigZagging on a Tree</li><li>Check BST<ul><li>判断是否为 BST</li><li>返回层数 level</li></ul></li><li>Binary Search Tree<ul><li>建立 BST</li><li>判断两 BST 是否一样</li></ul></li><li>线索二叉树<ul><li>记 ptr 指向二叉链表中的一个结点，以下是建立线索的规则：<br>（1）如果 ptr-&gt;lchild 为空，则存放指向中序遍历序列中该结点的前驱结点。这个结点称为 ptr 的中序前驱；<br>（2）如果 ptr-&gt;rchild 为空，则存放指向中序遍历序列中该结点的后继结点。这个结点称为 ptr 的中序后继；</li></ul></li></ul><h2 id="chap05-Priority-Queues"><a href="#chap05-Priority-Queues" class="headerlink" title="chap05 Priority Queues"></a>chap05 Priority Queues</h2><ul><li><p>完全二叉树高为$h$, 节点数$2^h$到$2^{h+1}-1$</p></li><li><p>$h=\lfloor \log N\rfloor$</p></li><li><p>最小堆/最大堆排序</p><ul><li>时间复杂度$\log_2 N$</li></ul></li><li><p>d-heap</p><ul><li>每个节点有 d 个孩子</li><li>时间复杂度$d\log_dN$</li><li>$i$的父亲$⌊(i+d−2)/d⌋$, 第一个儿子$ (i−1)d+2$, 最后一个儿子$ id+1$</li></ul></li><li><p>Percolate Up and Down</p></li><li><p>Complete Binary Search Tree</p><ul><li>完全二叉搜索树建立</li><li>树的前序遍历</li></ul></li></ul><h2 id="chap06-Sort"><a href="#chap06-Sort" class="headerlink" title="chap06 Sort"></a>chap06 Sort</h2><p><img src="https://raw.githubusercontent.com/MiracleZeroPenguin/images/main/img/format%2Cpng.png" alt="img"></p><h3 id="6-1-Shellsort"><a href="#6-1-Shellsort" class="headerlink" title="6.1 Shellsort"></a>6.1 Shellsort</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Shellsort</span><span class="hljs-params">( ElementType A[ ], <span class="hljs-keyword">int</span> N )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span>  i, j, Increment;<br>    ElementType  Tmp;<br>    <span class="hljs-keyword">for</span> ( Increment = N / <span class="hljs-number">2</span>; Increment &gt; <span class="hljs-number">0</span>; Increment /= <span class="hljs-number">2</span> )<br><span class="hljs-comment">/*h sequence */</span><br><span class="hljs-keyword">for</span> ( i = Increment; i &lt; N; i++ ) &#123; <span class="hljs-comment">/* insertion sort */</span><br>        Tmp = A[ i ];<br>     <span class="hljs-keyword">for</span> ( j = i; j &gt;= Increment; j - = Increment )<br>             <span class="hljs-keyword">if</span>( Tmp &lt; A[ j - Increment ] )<br>                 A[ j ] = A[ j - Increment ];<br>        <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">break</span>;<br>A[ j ] = Tmp;<br>&#125; <span class="hljs-comment">/* end for-I and for-Increment loops */</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>第一次间隔为$\lfloor N/2\rfloor$</p><p>后面每一次的间隔为前一次的一半</p><h3 id="6-2-Heapsort"><a href="#6-2-Heapsort" class="headerlink" title="6.2 Heapsort"></a>6.2 Heapsort</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Heapsort</span><span class="hljs-params">( ElementType A[ ], <span class="hljs-keyword">int</span> N )</span></span><br><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span> ( i = N / <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i - - ) <span class="hljs-comment">/* BuildHeap */</span><br>        PercDown( A, i, N );<br>    <span class="hljs-keyword">for</span> ( i = N - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i - - ) &#123;<br>        Swap( &amp;A[ <span class="hljs-number">0</span> ], &amp;A[ i ] ); <span class="hljs-comment">/* DeleteMax */</span><br>        PercDown( A, <span class="hljs-number">0</span>, i );<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-3-Mergesort"><a href="#6-3-Mergesort" class="headerlink" title="6.3 Mergesort"></a>6.3 Mergesort</h3><ul><li>需要额外线性空间</li><li>O( N + N log N )次归并</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MSort</span><span class="hljs-params">( ElementType A[ ], ElementType TmpArray[ ],</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">int</span> Left, <span class="hljs-keyword">int</span> Right )</span></span><br><span class="hljs-function"></span>&#123;   <span class="hljs-keyword">int</span>  Center;<br>    <span class="hljs-keyword">if</span> ( Left &lt; Right ) &#123;  <span class="hljs-comment">/* if there are elements to be sorted */</span><br>Center = ( Left + Right ) / <span class="hljs-number">2</span>;<br>MSort( A, TmpArray, Left, Center ); <span class="hljs-comment">/* T( N / 2 ) */</span><br>MSort( A, TmpArray, Center + <span class="hljs-number">1</span>, Right ); <span class="hljs-comment">/* T( N / 2 ) */</span><br>Merge( A, TmpArray, Left, Center + <span class="hljs-number">1</span>, Right );  <span class="hljs-comment">/* O( N ) */</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Mergesort</span><span class="hljs-params">( ElementType A[ ], <span class="hljs-keyword">int</span> N )</span></span><br><span class="hljs-function"></span>&#123;   ElementType  *TmpArray;  <span class="hljs-comment">/* need O(N) extra space */</span><br>    TmpArray = <span class="hljs-built_in">malloc</span>( N * <span class="hljs-keyword">sizeof</span>( ElementType ) );<br>    <span class="hljs-keyword">if</span> ( TmpArray != <span class="hljs-literal">NULL</span> ) &#123;<br>MSort( A, TmpArray, <span class="hljs-number">0</span>, N - <span class="hljs-number">1</span> );<br><span class="hljs-built_in">free</span>( TmpArray );<br>    &#125;<br>    <span class="hljs-keyword">else</span>  FatalError( <span class="hljs-string">&quot;No space for tmp array!!!&quot;</span> );<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>Iterative Mergesort<ul><li>归并排序，每归并一次输出一次</li></ul></li></ul><h3 id="6-4-Quiksort"><a href="#6-4-Quiksort" class="headerlink" title="6.4 Quiksort"></a>6.4 Quiksort</h3><ul><li>找一个基准，然后从右到左找一个比基准大的，从左到右找一个比基准小的，交换，一轮结束后，基准左边再做快排，右边也做快排</li><li>数量少的时候插入排序更快</li></ul><h3 id="6-5-Tablesort"><a href="#6-5-Tablesort" class="headerlink" title="6.5 Tablesort"></a>6.5 Tablesort</h3><p>In the worst case there are $\lfloor N/2\rfloor $ cycles and requires $\lfloor 3N/2\rfloor$ record moves.</p><h3 id="6-6-Bucketsort"><a href="#6-6-Bucketsort" class="headerlink" title="6.6 Bucketsort"></a>6.6 Bucketsort</h3><ul><li><p>桶排序$O(N)$</p><ol><li><p>通常桶越多，执行效率越快，即省时间，但是桶越多，空间消耗就越大，是一种通过<strong>空间换时间</strong>的方式</p></li><li><p>桶排序的时间代价，假设有<em>m</em>个桶，则每个桶的元素为<em>n/m;</em></p><p>当辅助函数为冒泡排序$O(n2)$时,桶排序为 $O(n)+mO((n/m)2)$;</p><p>当辅助函数为快速排序时$O(nlgn)$时,桶排序为 $*O(n)+mO(n/m log(n/m))$</p></li><li><p>每个桶存储区间内的元素<em>(</em>区间为半开区间例如<em>[0,10)</em>或者<em>[200,300) )</em></p></li><li><p>根据数据规模 n 划分，m 个相同大小的区间 （每个区间为一个桶，桶可理解为容器）</p></li></ol></li></ul><h3 id="6-7-Insertionsort"><a href="#6-7-Insertionsort" class="headerlink" title="6.7 Insertionsort"></a>6.7 Insertionsort</h3><ul><li>inversion: pair ( i, j ) having the property that i &lt; j but A[i] &gt; A[j]</li></ul><h2 id="chap7-Hashing-amp-Rehashing"><a href="#chap7-Hashing-amp-Rehashing" class="headerlink" title="chap7 Hashing &amp; Rehashing"></a>chap7 Hashing &amp; Rehashing</h2><ul><li>Hashing collision: Two elements with different keys share the same hash value</li></ul><h2 id="chap8-Union-find"><a href="#chap8-Union-find" class="headerlink" title="chap8 Union-find"></a>chap8 Union-find</h2><ul><li><p>不做优化的话最差时间复杂度是线性的</p></li><li><p>union by size/union by height</p><ul><li>用于如何合并两棵树的判断，小的成为大的的儿子/矮的成为高的的儿子</li></ul></li><li>union by size<ul><li>$S[root]=-size$</li><li>N 次插入 M 次搜索时间复杂度$O(N+M\log_2N)$</li></ul></li><li>n 个元素 m 个关系，至少 n-m 个等价类</li><li>File Transfer<ul><li>寻找根</li><li>union by size</li><li>check 是否联通</li></ul></li></ul><h2 id="chap9-Graph"><a href="#chap9-Graph" class="headerlink" title="chap9 Graph"></a>chap9 Graph</h2><h3 id="9-1-Graph-definition"><a href="#9-1-Graph-definition" class="headerlink" title="9.1 Graph definition"></a>9.1 Graph definition</h3><ul><li><p>$G(V,E)$</p><ul><li>G: Graph</li><li>$V=V(G)$: 有限非空顶点集合</li><li>$E=E(G)$: 有限边集合</li><li>不允许自成环</li></ul></li><li><p>$G_1\subset G=V(G_1)\subset V(G)\&amp;\&amp;E(G_1)\subset E(G)$</p></li><li><p>connect graph：每个点到任一点都有通路</p></li><li><p>component of an undirected G: 最大连接子图</p></li><li><p>强连通图</p><p>有向图中，若任意两个顶点 Vi 和 Vj，满足从 Vi 到 Vj 以及从 Vj 到 Vi 都连通，也就是都含有至少一条通路，则称此有向图为强连通图。</p></li><li><p>若有向图本身不是强连通图，但其包含的最大连通子图具有强连通图的性质，则称该子图为强连通分量</p></li><li><p>$degree(V)$顶点周围边的条数</p><ul><li>n 顶点 e 边：$\sum_{i=0}^{n-1}degree(v_i)/2=e$</li></ul></li><li><p>Adjacency Matrix 邻接矩阵</p></li><li><p>Adjacency List 邻接链表</p></li></ul><h3 id="9-2-Topological-sort"><a href="#9-2-Topological-sort" class="headerlink" title="9.2 Topological sort"></a>9.2 Topological sort</h3><ul><li>AOV network: 有向不循环图</li><li>if a project is feasible, it must be irreflexive<ul><li>irreflexive: 存在 i 到 j 有通路但无边</li></ul></li><li>拓扑排序不唯一</li><li>Is Topological Order<ul><li>拓扑排序的判断</li></ul></li></ul><h3 id="9-3-Shortest-path"><a href="#9-3-Shortest-path" class="headerlink" title="9.3 Shortest path"></a>9.3 Shortest path</h3><ul><li>If there is no negative-cost cycle, the shortest path from s to s is defined to be 0</li><li>$T = O( |V| + |E| )$</li><li>Shortest Path [3]<ul><li>最短路径条数+最短路径长度</li></ul></li><li>Shortest Path [4]<ul><li>最短路径长度+最短路径上终点前的节点</li></ul></li></ul><h3 id="9-4-Network-flow"><a href="#9-4-Network-flow" class="headerlink" title="9.4 Network flow"></a>9.4 Network flow</h3><ul><li>最大流算法<ul><li>找当前节点上最大的路径<ul><li>network.c dinic 算法</li><li>Universal Travel Sites</li></ul></li></ul></li></ul><h3 id="9-5-Minimum-Spanning-Tree"><a href="#9-5-Minimum-Spanning-Tree" class="headerlink" title="9.5 Minimum Spanning Tree"></a>9.5 Minimum Spanning Tree</h3><ul><li>边数=顶点数-1</li></ul><h3 id="9-6-MST"><a href="#9-6-MST" class="headerlink" title="9.6 MST"></a>9.6 MST</h3><h3 id="9-7-DFS"><a href="#9-7-DFS" class="headerlink" title="9.7 DFS"></a>9.7 DFS</h3><ul><li><p>欧拉回路</p><ul><li>An Euler tour is possible if there are exactly two vertices having odd degree. One must start at one of the odd-degree vertices.</li><li>欧拉通路、欧拉回路、欧拉图<br>无向图：<ol><li>设 G 是连通无向图，则称经过 G 的每条边一次并且仅一次的路径为欧拉通路；</li><li>如果欧拉通路是回路（起点和终点是同一个顶点），则称此回路为欧拉回路（Euler circuit）；</li><li>具有欧拉回路的无向图 G 称为欧拉图（Euler graph）。<br>有向图：</li><li>设 D 是有向图，D 的基图连通，则称经过 D 的每条边一次并且仅一次的有向路径为有向欧拉通路；</li><li>如果有向欧拉通路是有向回路，则称此有向回路为有向欧拉回路（directed Euler circuit）；</li><li>具有有向欧拉回路的有向图 D 称为有向欧拉图（directed Euler graph）。</li></ol></li></ul><ol><li>定理及推论<br>欧拉通路和欧拉回路的判定是很简单的，请看下面的定理及推论。</li></ol><blockquote><p>定理 5.1 无向图 G 存在欧拉通路的充要条件是：G 为连通图，并且 G 仅有两个奇度结点（度数为奇数的顶点）或者无奇度结点。</p><p>推论 5.1：</p><ol><li>当 G 是仅有两个奇度结点的连通图时，G 的欧拉通路必以此两个结点为端点。</li><li>当 G 是无奇度结点的连通图时，G 必有欧拉回路。</li><li>G 为欧拉图（存在欧拉回路）的充分必要条件是 G 为无奇度结点的连通图。</li></ol><p>定理 5.2 有向图 D 存在欧拉通路的充要条件是：<br>D 为有向图，D 的基图连通，并且所有顶点的出度与入度都相等；或者除两个顶点外，其余顶点的出度与入度都相等，而这两个顶点中一个顶点的出度与入度之差为 1，另一个顶点的出度<br>与入度之差为-1。<br>推论 5.2：</p><ol><li>当 D 除出、入度之差为 1，-1 的两个顶点之外，其余顶点的出度与入度都相等时，D 的有向欧拉通路必以出、入度之差为 1 的顶点作为始点，以出、入度之差为-1 的顶点作为终点。</li><li>当 D 的所有顶点的出、入度都相等时，D 中存在有向欧拉回路。</li><li>有向图 D 为有向欧拉图的充分必要条件是 D 的基图为连通图，并且所有顶点的出、入度都相等。</li></ol></blockquote><ol><li>欧拉回路的应用<br>欧拉回路最著名的有三个应用，大家可以网上百度一下，这里不详述。<br>哥尼斯堡七桥问题<br>一笔画问题。<br>旋转鼓轮的设计 4.欧拉回路的判定<br>判断欧拉路是否存在的方法<br>有向图：图连通，有一个顶点出度大入度 1，有一个顶点入度大出度 1，其余都是出度=入度。<br>无向图：图连通，只有两个顶点是奇数度，其余都是偶数度的。<br>判断欧拉回路是否存在的方法<br>有向图：图连通，所有的顶点出度=入度。<br>无向图：图连通，所有顶点都是偶数度。</li></ol></li><li><p>Strongly Connected Components</p><ul><li>寻找回路：所有顶点的出、入度都相等时，D 中存在有向欧拉回路。</li></ul><ol><li>有向图 D 为有向欧拉图的充分必要条件是 D 的基图为连通图，并且所有顶点的出、入度都相等。</li><li>欧拉回路的应用<br>欧拉回路最著名的有三个应用，大家可以网上百度一下，这里不详述。<br>哥尼斯堡七桥问题<br>一笔画问题。<br>旋转鼓轮的设计</li><li>欧拉回路的判定<br>判断欧拉路是否存在的方法<br>有向图：图连通，有一个顶点出度大入度 1，有一个顶点入度大出度 1，其余都是出度=入度。<br>无向图：图连通，只有两个顶点是奇数度，其余都是偶数度的。<br>判断欧拉回路是否存在的方法<br>有向图：图连通，所有的顶点出度=入度。<br>无向图：图连通，所有顶点都是偶数度。</li></ol></li><li><p>Strongly Connected Components</p><ul><li>寻找回路</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>一些课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课程笔记</tag>
      
      <tag>fds</tag>
      
      <tag>cs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宏观经济学 马工程教材笔记整理</title>
    <link href="/2020/07/02/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E9%A9%AC%E5%B7%A5%E7%A8%8B%E6%95%99%E6%9D%90%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    <url>/2020/07/02/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E9%A9%AC%E5%B7%A5%E7%A8%8B%E6%95%99%E6%9D%90%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<!-- <div class="row">    <embed src="/pdfs/宏观经济学.pdf" width="100%" height="550" type="application/pdf"></div> --><object data="/pdfs/宏观经济学.pdf" type="application/pdf" width="100%" height="877px">]]></content>
    
    
    <categories>
      
      <category>一些课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>宏观经济学</tag>
      
      <tag>金融</tag>
      
      <tag>课程笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
