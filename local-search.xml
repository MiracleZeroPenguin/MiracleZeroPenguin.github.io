<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>面向找工作的面经汇总</title>
    <link href="/2021/12/07/%E9%9D%A2%E5%90%91%E6%89%BE%E5%B7%A5%E4%BD%9C%E7%9A%84%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/"/>
    <url>/2021/12/07/%E9%9D%A2%E5%90%91%E6%89%BE%E5%B7%A5%E4%BD%9C%E7%9A%84%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="面向找工作的面经汇总"><a href="#面向找工作的面经汇总" class="headerlink" title="面向找工作的面经汇总"></a>面向找工作的面经汇总</h1><blockquote><p>面向找工作，所以以一些常见的问题收集为主</p></blockquote><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="计算机网络由哪几个部分组成"><a href="#计算机网络由哪几个部分组成" class="headerlink" title="计算机网络由哪几个部分组成"></a>计算机网络由哪几个部分组成</h3><p>计算机网络＝资源子网＋通信子网＋协议</p><p><strong>资源子网：</strong>由若干个主机组成，它们向各个用户提供服务；</p><p><strong>通信子网：</strong>由一些专用的节点交换机和连接这些节点的通信链路组成；</p><p><strong>一系列的协议：</strong>这些协议是为在主机之间或主机和子网之间的通信而用</p><h3 id="TCP-建立连接的三次握手"><a href="#TCP-建立连接的三次握手" class="headerlink" title="TCP 建立连接的三次握手"></a>TCP 建立连接的三次握手</h3><ol><li>起初两端都处于 closed 关闭状态，client 将标志位 SYN 置 1，随机产生一个序列值 seq=x，并将该数据包发给 Server，Client 进入 SYN-SENT 状态，等待 Server 确认</li><li>Server 收到数据包后由 SYN=1 得知 Client 正在请求建立连接，Server 将标志位 SYN 和 ACK 都置 1，响应统计值 ack=x+1，随机产生序列值 seq=y，并将该数据包发送给 Client 以确认连接请求，Server 进入 SYN-RCVD 状态，操作系统为该 TCP 连接分配缓存和变量</li><li>Client 收到确认后，检查 ACK 是否为 1、ack 是否为 x+1，并且此时操作系统为该连接分配缓存和变量，将数据包发给 Server。Server 检查 ack 是否为 y+1，ACK 是否为 1，如果正确则连接建立成功，Client 与 Server 进入 Established 状态，可以开始传输数据</li></ol><p><img src="https://raw.githubusercontent.com/MiracleZeroPenguin/images/main/img/666d7d20aa907d8317af3770411f5aa2.jpg" alt="状态变化时序图"></p><h3 id="CDN-原理"><a href="#CDN-原理" class="headerlink" title="CDN 原理"></a>CDN 原理</h3><p>Content Delivery Network，内容分发网络。基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中。在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应</p><h3 id="用户从输入-URL-到显示页面的过程"><a href="#用户从输入-URL-到显示页面的过程" class="headerlink" title="用户从输入 URL 到显示页面的过程"></a>用户从输入 URL 到显示页面的过程</h3><ol><li>DNS 解析</li><li>TCP 连接</li><li>发送 HTTP 请求</li><li>服务器处理请求并返回 HTTP 报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ol><h3 id="HTTP-的请求方法"><a href="#HTTP-的请求方法" class="headerlink" title="HTTP 的请求方法"></a>HTTP 的请求方法</h3><p>常见的请求方法有 get,post，</p><p>get 用来请求数据，post 用来提交数据，form 表单使用 get 时数据会以 querystring 形式存在 url 中，因而不够安全也存在数据大小限制，而 post 不会，post 将数据存放在 http 报文体中，获取数据应该用 get，提交数据用 post</p><h3 id="GET-与-POST-区别"><a href="#GET-与-POST-区别" class="headerlink" title="GET 与 POST 区别"></a>GET 与 POST 区别</h3><ol><li>GET 把 参数包含在 URL 中，POST 通过 request body 传递参数</li><li>GET 请求会被 浏览器主动 cache，而 POST 不会，除非手动设置。</li><li>GET 产生 一个 TCP 数据包；POST 产生 两个 TCP 数据包。</li><li>GET 比 POST 更不安全，因为参数 直接暴露在 URL 上，所以不能用来传递敏感信息。</li><li>GET 请求只能进行 url 编码，而 POST 支持 多种编码方式。</li><li>GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。</li><li>GET 产生的 URL 地址可以被 Bookmark，而 POST 不可以</li><li>GET 在浏览器回退时是无害的，而 POST 会再次提交请求。</li><li>由于（主流） 浏览器的一些 限制，导致 get 请求所传输的数据长度和字符编码(ASCII)受到一些限制，但是 post 请求一般未对其进行限制，所以支持更多的编码和数据长度</li></ol><h3 id="请求方法的-head"><a href="#请求方法的-head" class="headerlink" title="请求方法的 head"></a>请求方法的 head</h3><p>Head 只请求页面的首部，head 方法和 get 方法相同，但是服务器响应 head 时不返回消息体。在一个 head 请求的响应中，http 头中包含的元信息应该和一个 get 请求的响应消息相通。head 方法可以用来获取请求中隐含的元信息，而不用传输实体本身，可以用来测试超链接的有效性。</p><ol><li>只请求资源的首部</li><li>检查超链接有效性</li><li>检查网页是否被修改</li></ol><p>用于自动搜索机器人获取网页的标志信息，获取 rss 种子信息，或者传递安全认证信息等</p><h3 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h3><blockquote><p>第一个数字进行分类</p><p>1 表示信息，2 表示成功，3 表示重定向，4 表示客户端错误，5 表示服务器错误</p></blockquote><p>常见的有 101 切换协议，200 成功，301 永久重定向，302 临时重定向，304 未修改</p><hr><p>301 和 302：</p><p>301 永久移动，请求的网页已经永久移动到新的未知，服务器返回此响应，会自动将请求者转到新位置。</p><p>302 历史移动，服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来继续以后的请求。</p><hr><p>200 和 304</p><p>200 表示成功，服务器已成功处理请求，表示为服务器提供了请求的网页</p><p>304 表示未修改，自从上次请求后，请求的网页未修改过，服务器返回此响应时不会返回网页内容</p><h3 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h3><ol><li>应用层：文件传输，HTTP、SNMP、FTP</li><li>表示层：数据格式化、代码转换，数据加密</li><li>会话层：建立、接触会话</li><li>传输层：提供端对端的接口，TCP、UDP</li><li>网络层：为数据包选择路由，IP、ICMP</li><li>数据链路层：传输有地址的帧</li><li>物理层：在物理媒体上传输二进制形式的数据</li></ol><h3 id="TCP-IP-模型"><a href="#TCP-IP-模型" class="headerlink" title="TCP/IP 模型"></a>TCP/IP 模型</h3><p>是一系列网络协议的总称，目的是使计算机之间可以进行信息交换</p><p>从上到下：</p><ol><li>链路层：负责建立电路连接，是整个网络的物理基础，典型协议包括以太网、ADSL</li><li>网络层：分配地址和传送二进制数据，主要协议是 IP 协议</li><li>传输层：负责传送文本数据，主要协议是 TCP</li><li>应用层：传送各种最终形态的数据，是直接与用户信息打交道的层，主要协议是 http、ftp</li></ol><h3 id="TCP-与-UDP-区别"><a href="#TCP-与-UDP-区别" class="headerlink" title="TCP 与 UDP 区别"></a>TCP 与 UDP 区别</h3><p>UDP 不一定提供可靠的数据传输</p><ul><li>TCP 是面向连接的，UDP 是面向无连接的</li><li>UDP 程序结构较简单</li><li>TCP 是面向字节流的，UDP 是基于数据报的</li><li>TCP 保证数据正确性，UDP 可能丢包</li><li>TCP 保证数据顺序，UDP 不保证</li></ul><h3 id="TCP-为什么需要四次挥手"><a href="#TCP-为什么需要四次挥手" class="headerlink" title="TCP 为什么需要四次挥手"></a>TCP 为什么需要四次挥手</h3><p>因为双方都要释放自己的连接，A 向 B 发出释放连接请求，B 收到后给 A 发送一个确认，此时 A 就不能再向 B 发送数据了，处于 FIN-WAIT-2 的状态，但此时 B 还可以向 A 发送数据。接着 B 向 A 也发送一个断开连接的请求，A 收到后给 B 发送一个确认。此时 A、B 都关闭了连接。</p><p><img src="https://raw.githubusercontent.com/MiracleZeroPenguin/images/main/img/1f6a5e17b34f00d28722428b7b8ccb11.jpg" alt="断开连接状态时序图"></p><h3 id="HTTP-缓存机制"><a href="#HTTP-缓存机制" class="headerlink" title="HTTP 缓存机制"></a>HTTP 缓存机制</h3><p>浏览器第一次向服务器发起 HTTP 请求后，服务器会返回请求的资源，并且在响应头中添加一些有关缓存的字段（比如 cache-control，expires，last-modifies，ETag，Data），之后浏览器再向该服务器请求资源就可以视情况使用强缓存和协商缓存</p><p><strong>强缓存</strong>：浏览器直接从本地缓存中获取数据，不与服务器进行交互</p><p><strong>协商缓存</strong>：浏览器发送请求到服务器，服务器判断是否可使用本地缓存</p><h3 id="https-握手过程"><a href="#https-握手过程" class="headerlink" title="https 握手过程"></a>https 握手过程</h3><ol><li>客户端发起握手请求，以明文传输请求信息，就是用户在浏览器里输入一个 HTTPS 网址，然后连接到服务端的 443 端口</li><li>服务端进行配置，采用 HTTPS 协议的服务器必须要有一套数字证书（也就是一对公钥和私钥），可以自己制作，也可以向组织申请</li><li>服务端返回协商的信息结果，包括选择使用的协议版本 version，选择的加密套件 cipher suite</li><li>客户端验证证书的合法性，包括可信性，是否吊销，过期时间和域名，这部分工作是由客户端的 SSL/TLS 来完成的</li><li>客户端使用公匙对对称密匙加密，发送给服务端，传送的是用证书加密后的随机值。</li><li>服务器用私钥解密，拿到对称加密的密匙（服务端用私钥解密后，得到了客户端传过来的随机值，然后把内容通过该随机值进行对称加密，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥）</li><li>传输加密后的信息，这部分信息就是服务端用私钥加密后的信息，可以在客户端用随机值解密还原</li><li>客户端解密信息，客户端用之前生产的私钥解密服务端传过来的信息，于是获取了解密后的内容</li></ol><h3 id="波特率计算公式"><a href="#波特率计算公式" class="headerlink" title="波特率计算公式"></a>波特率计算公式</h3><p>比特率=波特率*单个调制状态对应的二进制位数</p><p>波特率指单片机或计算机在串口通信时的速率。指的是信号被调制以后在单位时间内的变化，即单位时间内载波参数变化的次数</p><h3 id="webSocket-心跳机制"><a href="#webSocket-心跳机制" class="headerlink" title="webSocket 心跳机制"></a>webSocket 心跳机制</h3><p>心跳机制指客户端每隔一段时间会向服务器发送一个数据包，告诉服务器自己还活着，同时客户端会确认服务器端是否还活着，如果还活着的话，服务端就会回传一个数据包给客户端来确定服务器端也还活着，否则的话，有可能是网络断开连接了。需要重连。</p><p>在使用 websocket 的过程中，有时候会遇到网络断开的情况，但是在网络断开的时候服务器端并没有触发 onclose 的事件。这样会有：服务器会继续向客户端发送多余的链接，并且这些数据还会丢失。所以就需要一种机制来检测客户端和服务端是否处于正常的链接状态。因此就有了 websocket 的心跳了。</p><h3 id="tcp-和-http-关系"><a href="#tcp-和-http-关系" class="headerlink" title="tcp 和 http 关系"></a>tcp 和 http 关系</h3><p>http 底层用什么协议得分版本，http1.0 和 http2.0 都是基于 tcp；http3.0 是基于 udp 的，利用介于传输层和应用层之间的一个协议 QUIC 协议保证可靠传输</p><h3 id="网页打不开应该怎么排查"><a href="#网页打不开应该怎么排查" class="headerlink" title="网页打不开应该怎么排查"></a>网页打不开应该怎么排查</h3><p>首先 ping 域名，域名假如 ping 不通说明域名解析有问题，域名能 ping 通但是网站访问不了就有可能是网站程序或者是服务器的问题。也可以根据网站的提醒，当显示 404 或者一些服务器错误的提醒，404 代表的是网页不存在，有可能是网站代码出了问题这样我们集中排查网站程序的问题就行了。也有许多情况是我的电脑打不开，但是有的同伙电脑能打开，这个情况有两种情况，一种是域名 dns 问题，一种是网站服务器问题导致的个别地区访问不了网站的情况。</p><h3 id="HTTP-与-HTTPs-的区别"><a href="#HTTP-与-HTTPs-的区别" class="headerlink" title="HTTP 与 HTTPs 的区别"></a>HTTP 与 HTTPs 的区别</h3><ol><li>加密：http 协议对传输的数据不进行加密；https 协议对传输的数据进行加密，https 加密需要 CA 签发的证书。</li><li>端口：http 协议使用 TCP 的 80 端口；https 协议使用 TCP 的 443 端口</li><li>网络分层模型：http 可以明确是位于应用层；https 是在 http 的基础上加上了 SSL 安全协议，而 SSL 是运输层协议，所以 https 是应用层和传输层的结合</li></ol><h3 id="HTTPs-怎么保证安全"><a href="#HTTPs-怎么保证安全" class="headerlink" title="HTTPs 怎么保证安全"></a>HTTPs 怎么保证安全</h3><p>https 通过 SSL 安全协议来保障安全性。具体体现在密钥和证书验证上。<br><strong>密钥：</strong><br>1、服务端生成一对公钥和私钥，将公钥和证书发送给客户端；<br>2、客户端验证证书通过后生成一个对称加密的密钥，并使用服务器生成的公钥加密，发送给服务器；<br>3、服务器使用私钥解密获得对称加密密钥。<br>4、客户端和服务器相互发送消息认可对称加密密钥，至此加密通道建立。<br>5、开始数据传输，在检验数据完整性的基础上，使用对称加密密钥进行加密解密。<br><strong>证书验证：</strong><br>一般来说浏览器都内置了权威 CA 的根证书，客户端使用根证书的密钥对服务器发来的证书进行解密验证，若域名、有效期、签发机关等验证项符合则通过，否则认定证书无效，断开连接。</p><h3 id="HTTPs-是对称加密还是非对称加密"><a href="#HTTPs-是对称加密还是非对称加密" class="headerlink" title="HTTPs 是对称加密还是非对称加密"></a>HTTPs 是对称加密还是非对称加密</h3><p>采用 对称加密 和 非对称加密 结合的方式来保护浏览器和服务端之间的通信安全。</p><h3 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h3><p>地址解析协议，即<em>ARP</em>（Address Resolution Protocol）</p><p><strong>用于实现从 IP 地址到 MAC 地址的映射，即询问目标 IP 对应的 MAC 地址</strong>。</p><ol><li>主机 A 先查看自己的 ARP 表，确定其中是否包含有主机 B 对应的 ARP 表项，如果找到了对应的 MAC 地址，主机 A 直接利用这个地址对 IP 数据包进行帧分装，并将数据包发送给主机 B</li><li>如果再 ARP 表中找不到，则缓存数据报文，并以广播的方式给该网段上所有主机发送 ARP 请求报文，但只有被请求的主机 B 才会对该请求进行处理</li><li>主机 B 比较自己的 IP 地址与 ARP 请求报文中的目标 IP 地址，若相同，则将主机 A 的 IP 地址与 MAC 地址存入自己的 ARP 表中，之后以单播方式发送 ARP 响应报文给主机 A，其中包含自己的 MAC 地址</li><li>主机 A 收到 ARP 响应报文后，将主机 B 的 MAX 地址加入自己的 ARP 表中，同时封装 IP 数据包并发送</li></ol><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>dns 解析有两种查询方式，分为递归查询和迭代查询。一般的 主机 向本地域名服务器的查询使用递归查询，本地域名服务器向根域名服务器查询使用迭代查询。它使用的是 UDP 协议，原因是性能更好，查询时间更短，如果发生数据丢失，重传一个就好了，不需要建立连接</p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="计算机由哪几个部分构成，怎么通讯？"><a href="#计算机由哪几个部分构成，怎么通讯？" class="headerlink" title="计算机由哪几个部分构成，怎么通讯？"></a>计算机由哪几个部分构成，怎么通讯？</h3><p>冯·诺伊曼把计算机分作五部分：计算器、控制器、存储器、输入和输出设备。</p><h3 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h3><p>并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竞争计算机系统资源的基本单位</p><h3 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h3><p>是进程的一部分，一个没有线程的进程可以被看作是单线程的，也是 CPI 调度的一个基本单位</p><h3 id="操作系统中进程和线程的区别"><a href="#操作系统中进程和线程的区别" class="headerlink" title="操作系统中进程和线程的区别"></a>操作系统中进程和线程的区别</h3><p>进程是具有一定独立功能的程序，他是系统进行资源分配调度的一个独立单位，</p><p>线程是进程的一个实体，是 cpu 调度分派的基本单位，线程之间基本上不拥有系统资源</p><p>一个程序至少有一个进程，一个进程至少有一个线程，资源分配给进程，同一个进程下所有线程共享该进程的资源</p><h3 id="线程的共享资源"><a href="#线程的共享资源" class="headerlink" title="线程的共享资源"></a>线程的共享资源</h3><h4 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h4><ol><li>堆：堆是在进程空间中开辟的</li><li>全局变量：与某一具体函数无关，所以也与特定线程无关</li><li>静态变量：对于局部变量来说，是放在某一函数的代码中的，但是存放位置和全局变量一样，存于堆开辟的.bss 和.data 段，是共享的</li><li>文件等公用资源：使用这些公共资源的线程必须同步，win32 提供了几种资源同步的方式，如信号、临界区、时间和互斥体</li></ol><h4 id="独享"><a href="#独享" class="headerlink" title="独享"></a>独享</h4><ol><li>栈：栈是独享的</li><li>寄存器：电脑的寄存器是物理的，但线程中存放的是寄存器的副本（包括程序计数器 PC）</li></ol><h3 id="进程间的通信方式"><a href="#进程间的通信方式" class="headerlink" title="进程间的通信方式"></a>进程间的通信方式</h3><p>共八种</p><ol><li>无名管道：半双工的通信方式，数据只能单向流动且只能在具有亲缘关系的进程间使用</li><li>高级管道：将另一个程序当作一个新的进程在当前程序进程中启动，则这个进程算是当前程序的子进程</li><li>有名管道：也是半双工的通信方式，但是允许没有亲缘进程之间的通信</li><li>消息队列：消息队列是有消息的链表，存放在内核中，并由消息队列标识符标识，消息队列克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限的缺点</li><li>信号量：信号量是一个计数器，可以用来控制多个进程对共享资源的访问，它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源，</li><li>信号：用于通知接受进程某个事件已经发生</li><li>共享内存：共享内存就是映射一段能被其他进程所访问的内存。这段共享内存由一个进程创建，但是多个进程可以访问，共享内存是最快的 IPC 方式，往往与其他通信机制配合使用</li><li>套接字：可用于不同机器之间的进程通信</li></ol><h3 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h3><p>著名的死锁避免算法</p><p>基本思想：把操作系统视为银行家，操作系统管理的资源相当于银行家管理的资金，进程向操作系统请求分配资源相当于用户向银行家贷款。操作系统按照银行家指定的规则进行进程的资源分配。</p><p>进程在运行之前先声明对各种资源的最大需求量，当进程在执行中继续申请资源时，先测试该进程已经占用的资源数和本次申请的资源数之和是否超过声明的最大需求量。如果超过了，就拒绝分配。否则，再测试系统现存的资源能否满足该进程尚需的最大资源量，如果能满足就分配，否则就推迟分配</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="Redis-和-MySQL"><a href="#Redis-和-MySQL" class="headerlink" title="Redis 和 MySQL"></a>Redis 和 MySQL</h3><p>从类型上来说，mysql 是关系型数据库，redis 是缓存数据库</p><p>作用上，mysql 用于持久化的存储数据到硬盘，功能强大，但是速度较慢。redis 用于存储使用较为频繁的数据到缓存中，读取速度快</p><p>需求上，mysql 和 redis 因为需求的不同，一般都是配合使用</p><h2 id="css、Js、http"><a href="#css、Js、http" class="headerlink" title="css、Js、http"></a>css、Js、http</h2><h3 id="CSS3-缩放、旋转相关的-API"><a href="#CSS3-缩放、旋转相关的-API" class="headerlink" title="CSS3 缩放、旋转相关的 API"></a>CSS3 缩放、旋转相关的 API</h3><p>在 CSS3 中，可以利用 transform 功能实现文字或图像的旋转、缩放、倾斜、移动这 4 中类型的变形处理。</p><p><strong>旋转</strong>：使用 rotate 方法，在参数中加入角度值，角度值后面跟表示角度单位的“deg”文字即可，旋转方向为顺时针方向。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>：rotate（<span class="hljs-number">45deg</span>）；<br></code></pre></td></tr></table></figure><p><strong>缩放</strong>：</p><p>使用 scale 方法来实现文字或图像的缩放处理，在参数中指定缩放倍率。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>：scale（<span class="hljs-number">0.5</span>）；//缩小一半<br></code></pre></td></tr></table></figure><p>可以分别指定元素的水平方向的放大倍率与垂直方向的放大倍率</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>：scale（<span class="hljs-number">0.5</span>，<span class="hljs-number">2</span>）；//水平方向缩小一半，垂直方向放大一倍。<br></code></pre></td></tr></table></figure><h3 id="js-为什么是单线程"><a href="#js-为什么是单线程" class="headerlink" title="js 为什么是单线程"></a>js 为什么是单线程</h3><p>作为浏览器脚本语言，JavaScript 的主要用途是与用户互动，以及操作 DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定 JavaScript 同时有两个线程，一个线程在某个 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><h3 id="移动端的适配要考虑哪些"><a href="#移动端的适配要考虑哪些" class="headerlink" title="移动端的适配要考虑哪些"></a>移动端的适配要考虑哪些</h3><p>在移动端虽然整体来说大部分浏览器内核都是 webkit，而且大部分都支持 CSS3 的所有语法。但是，由于手机屏幕尺寸不一样，分辨率不一样，或者我们还需要考虑横竖屏的问题，这时候也就不得不解决在不同手机上，不同情况下的展示效果了。</p><ol><li>元素自适应问题</li><li>文字 rem 问题</li><li>高清图问题</li><li>1 像素问题</li><li>横竖屏显示问题</li><li>手机字体缩放问题</li></ol><h3 id="JS-如果执行很久阻塞界面怎么办，有哪些解决方式？"><a href="#JS-如果执行很久阻塞界面怎么办，有哪些解决方式？" class="headerlink" title="JS 如果执行很久阻塞界面怎么办，有哪些解决方式？"></a>JS 如果执行很久阻塞界面怎么办，有哪些解决方式？</h3><p><strong>什么是阻塞</strong>：在页面中我们通常会引用外部文件，而浏览器在解析 HTML 页面是从上到下依次解析、渲染，如果中引用了一个 a.js 文件，而这个文件很大或者有问题，需要 2 秒加载，那么浏览器会停止渲染页面（此时是白屏显示，就是页面啥都没有），2 秒后加载完成才会继续渲染，这个就是阻塞。</p><p><strong>解决方法</strong>：</p><ol><li><p>推迟加载：如果页面初始的渲染并不依赖于 js 或者 CSS 可以用推迟加载，就是最后在加载 js 和 css，把引用外部文件的代码写在最后。比如一些按钮的点击事件，比如轮播图动画的脚本也可以放在最后。</p></li><li><p>defer 延迟加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;&quot;</span> defer&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>异步加载</p><p>就是告诉浏览器不必等到加载完外部文件，可以边渲染边下载，什么时候下载完成什么时候执行。</p></li></ol><h3 id="JS-跨域的实现"><a href="#JS-跨域的实现" class="headerlink" title="JS 跨域的实现"></a>JS 跨域的实现</h3><p>一个域通过某种方式请求到另一个域的数据</p><p><strong>JSONP：</strong>通过动态创建 script，再请求一个带参网址实现跨域通信。document.domain + iframe 跨域：两个页面都通过 js 强制设置 document.domain 为基础主域，就实现了同域。</p><p><strong>location.hash + iframe 跨域：</strong>a 欲与 b 跨域相互通信，通过中间页 c 来实现。 三个页面，不同域之间利用 iframe 的 location.hash 传值，相同域之间直接 js 访问来通信。</p><p><strong>window.name + iframe 跨域：</strong>通过 iframe 的 src 属性由外域转向本地域，跨域数据即由 iframe 的 window.name 从外域传递到本地域。</p><p><strong>postMessage 跨域：</strong>可以跨域操作的 window 属性之一。</p><p><strong>CORS：</strong>服务端设置 Access-Control-Allow-Origin 即可，前端无须设置，若要带 cookie 请求，前后端都需要设置。</p><p><strong>代理跨域：</strong>启一个代理服务器，实现数据的转发</p><h3 id="JS-语言特性"><a href="#JS-语言特性" class="headerlink" title="JS 语言特性"></a>JS 语言特性</h3><p>运行在客户端浏览器上；</p><p>不用预编译，直接解析执行代码；</p><p>是弱类型语言，较为灵活；</p><p>与操作系统无关，<a href="https://www.baidu.com/s?wd=跨平台&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd">跨平台</a>的语言；</p><p>脚本语言、解释性语言</p><h3 id="网页性能优化"><a href="#网页性能优化" class="headerlink" title="网页性能优化"></a>网页性能优化</h3><p>减少 HTTP 请求</p><p>使用内容发布网络（CDN）</p><p>添加本地缓存</p><p>压缩资源文件</p><p>将 CSS 样式表放在顶部，把 javascript 放在底部（浏览器的运行机制决定）</p><p>避免使用 CSS 表达式</p><p>减少 DNS 查询</p><p>使用外部 javascript 和 CSS</p><p>避免重定向</p><p>图片 lazyLoad</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>分为基本对象类型和引用对象类型</p><p>基本数据类型：按值访问，可操作保存在变量中的实际的值。基本类型值指的是简单的数据段。基本数据类型有这六种:undefined、null、string、number、boolean、symbol。</p><p>引用类型：当复制保存着对象的某个变量时，操作的是对象的引用，但在为对象添加属性时，操作的是实际的对象。引用类型值指那些可能为多个值构成的对象。</p><p>引用类型有这几种：Object、Array、RegExp、Date、Function、特殊的基本包装类型(String、Number、Boolean)以及单体内置对象(Global、Math)。</p><h3 id="元素类型的判断"><a href="#元素类型的判断" class="headerlink" title="元素类型的判断"></a>元素类型的判断</h3><p>判断方法：typeof()，instanceof，Object.prototype.toString.call()等</p><h3 id="HTML-载入和渲染的过程"><a href="#HTML-载入和渲染的过程" class="headerlink" title="HTML 载入和渲染的过程"></a>HTML 载入和渲染的过程</h3><ol><li>浏览器下载 HTML 文件并开始解析 DOM。</li><li>遇到样式表文件<code>link[rel=stylesheet]</code>时，将其加入资源文件下载队列，继续解析 DOM。</li><li>遇到脚本文件时，暂停 DOM 解析并立即下载脚本文件。</li><li>下载结束后立即执行脚本，在脚本中可访问当前``以上的 DOM。</li><li>脚本执行结束，继续解析 DOM。</li><li>整个 DOM 解析完成，触发<code>DOMContentLoaded</code>事件。</li></ol><h2 id="coding"><a href="#coding" class="headerlink" title="coding"></a>coding</h2><h3 id="KMP-算法"><a href="#KMP-算法" class="headerlink" title="KMP 算法"></a>KMP 算法</h3><h3 id="说说-C-Java，JavaScript-这三种语言的区别"><a href="#说说-C-Java，JavaScript-这三种语言的区别" class="headerlink" title="说说 C++,Java，JavaScript 这三种语言的区别"></a>说说 C++,Java，JavaScript 这三种语言的区别</h3><p>从静态类型还是动态类型来看</p><p>静态类型，编译的时候就能够知道每个变量的类型，编程的时候也需要给定类型，如 Java 中的整型 int，浮点型 float 等。C、C++、Java 都属于静态类型语言。</p><p>动态类型，运行的时候才知道每个变量的类型，编程的时候无需显示指定类型，如 JavaScript 中的 var、PHP 中的$。JavaScript、Ruby、Python 都属于动态类型语言。</p><p>静态类型还是动态类型对语言的性能有很大影响。</p><p>对于静态类型，在编译后会大量利用已知类型的优势，如 int 类型，占用 4 个字节，编译后的代码就可以用内存地址加偏移量的方法存取变量，而地址加偏移量的算法汇编很容易实现。</p><p>对于动态类型，会当做字符串通通存下来，之后存取就用字符串匹配。</p><p>从编译型还是解释型来看</p><p>编译型语言，像 C、C++，需要编译器编译成本地可执行程序后才能运行，由开发人员在编写完成后手动实施。用户只使用这些编译好的本地代码，这些本地代码由系统加载器执行，由操作系统的 CPU 直接执行，无需其他额外的虚拟机等。</p><p>源代码=》抽象语法树=》中间表示=》本地代码</p><p>解释性语言，像 JavaScript、Python，开发语言写好后直接将代码交给用户，用户使用脚本解释器将脚本文件解释执行。对于脚本语言，没有开发人员的编译过程，当然，也不绝对。</p><p>源代码=》抽象语法树=》解释器解释执行。</p><p>对于 JavaScript，随着 Java 虚拟机 JIT 技术的引入，工作方式也发生了改变。可以将抽象语法树转成中间表示（字节码），再转成本地代码，如 JavaScriptCore，这样可以大大提高执行效率。也可以从抽象语法树直接转成本地代码，如 V8</p><p>Java 语言，分为两个阶段。首先像 C++语言一样，经过编译器编译。和 C++的不同，C++编译生成本地代码，Java 编译后，生成字节码，字节码与平台无关。第二阶段，由 Java 的运行环境也就是 Java 虚拟机运行字节码，使用解释器执行这些代码。一般情况下，Java 虚拟机都引入了 JIT 技术，将字节码转换成本地代码来提高执行效率。</p><p>注意，在上述情况中，编译器的编译过程没有时间要求，所以编译器可以做大量的代码优化措施。</p><p>对于 JavaScript 与 Java 它们还有的不同：</p><p>对于 Java，Java 语言将源代码编译成字节码，这个同执行阶段是分开的。也就是从源代码到抽象语法树到字节码这段时间的长短是无所谓的。</p><p>对于 JavaScript，这些都是在网页和 JavaScript 文件下载后同执行阶段一起在网页的加载和渲染过程中实施的，所以对于它们的处理时间有严格要求。</p><hr><h3 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h3><p>MQTT(消息队列遥测传输)是 ISO 标准(ISO/IEC PRF 20922)下基于发布/订阅范式的消息协议。它工作在 TCP/IP 协议族上，是为硬件性能低下的远程设备以及网络状况糟糕的情况下而设计的发布/订阅型消息协议，为此，它需要一个消息中间件。</p>]]></content>
    
    
    <categories>
      
      <category>实习搬砖日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>面经</tag>
      
      <tag>计算机网络</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/12/06/hello-world/"/>
    <url>/2021/12/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS下llvm编译的踩坑经历</title>
    <link href="/2021/06/20/macOS%E4%B8%8Bllvm%E7%BC%96%E8%AF%91%E7%9A%84%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/"/>
    <url>/2021/06/20/macOS%E4%B8%8Bllvm%E7%BC%96%E8%AF%91%E7%9A%84%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="macOS-下-llvm-编译的踩坑经历"><a href="#macOS-下-llvm-编译的踩坑经历" class="headerlink" title="macOS 下 llvm 编译的踩坑经历"></a>macOS 下 llvm 编译的踩坑经历</h1><h2 id="出现问题："><a href="#出现问题：" class="headerlink" title="出现问题："></a>出现问题：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">error: no member named <span class="hljs-string">&#x27;MaybeAlign&#x27;</span> <span class="hljs-keyword">in</span> namespace <span class="hljs-string">&#x27;llvm&#x27;</span><br>    <span class="hljs-built_in">return</span> context.builder.CreateAlignedStore(val, ptr, llvm::MaybeAlign(4));<br>                                                        ~~~~~~^<br>error: no member named <span class="hljs-string">&#x27;MaybeAlign&#x27;</span> <span class="hljs-keyword">in</span> namespace <span class="hljs-string">&#x27;llvm&#x27;</span><br>    <span class="hljs-built_in">return</span> context.builder.CreateAlignedLoad(ptr, llvm::MaybeAlign(4));<br></code></pre></td></tr></table></figure><h2 id="解决过程："><a href="#解决过程：" class="headerlink" title="解决过程："></a>解决过程：</h2><p>使用<code>brew info llvm</code>查看 llvm 版本（<code>brew install llvm</code>安装）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">llvm: stable 12.0.0 (bottled), HEAD [keg-only]<br></code></pre></td></tr></table></figure><p>发现是<code>keg-only</code>的版本（我也不知道这是什么），但是 brew 提示了我</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">If you need to have llvm first <span class="hljs-keyword">in</span> your PATH, run:<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=&quot;/usr/local/opt/llvm/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc<br><br>For compilers to find llvm you may need to <span class="hljs-built_in">set</span>:<br>  <span class="hljs-built_in">export</span> LDFLAGS=<span class="hljs-string">&quot;-L/usr/local/opt/llvm/lib&quot;</span><br>  <span class="hljs-built_in">export</span> CPPFLAGS=<span class="hljs-string">&quot;-I/usr/local/opt/llvm/include&quot;</span><br></code></pre></td></tr></table></figure><p>感觉修改环境变量太麻烦了，于是……</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>在编译项目使用的 CMakeLists 中添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">SET(LLVM_DIR /usr/<span class="hljs-built_in">local</span>/opt/llvm/lib/cmake/llvm)<br>SET(CMAKE_PREFIX_PATH /usr/<span class="hljs-built_in">local</span>/opt/llvm/lib/cmake/)<br></code></pre></td></tr></table></figure><p>根据自己 llvm 的安装地址进行调整<br>编译成功<br>yeah ～</p>]]></content>
    
    
    <categories>
      
      <category>踩坑经历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
      <tag>llvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS安装python glove库踩坑经验</title>
    <link href="/2021/05/25/MacOS%E5%AE%89%E8%A3%85python-glove%E5%BA%93%E8%B8%A9%E5%9D%91%E7%BB%8F%E9%AA%8C/"/>
    <url>/2021/05/25/MacOS%E5%AE%89%E8%A3%85python-glove%E5%BA%93%E8%B8%A9%E5%9D%91%E7%BB%8F%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="MacOS-安装-python-glove-库踩坑经验"><a href="#MacOS-安装-python-glove-库踩坑经验" class="headerlink" title="MacOS 安装 python glove 库踩坑经验)"></a>MacOS 安装 python glove 库踩坑经验)</h1><h2 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h2><p>课程需要使用 glove 库，手上的 windows 电脑这两天又送修了，只能在 mac 上安装 python 的相关环境。其他倒是都没有问题，在使用<code>pip3 install glove-python</code>的时候碰到如下问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) ➜  ~ pip3 install glove-python<br>Collecting glove-python<br>  Using cached glove_python-0.1.0.tar.gz (263 kB)<br>Requirement already satisfied: numpy <span class="hljs-keyword">in</span> ./anaconda3/lib/python3.8/site-packages (from glove-python) (1.20.1)<br>Requirement already satisfied: scipy <span class="hljs-keyword">in</span> ./anaconda3/lib/python3.8/site-packages (from glove-python) (1.6.2)<br>Building wheels <span class="hljs-keyword">for</span> collected packages: glove-python<br>  Building wheel <span class="hljs-keyword">for</span> glove-python (setup.py) ... error<br>  ERROR: Command errored out with <span class="hljs-built_in">exit</span> status 1:<br>   <span class="hljs-built_in">command</span>: /Users/admin/anaconda3/bin/python -u -c <span class="hljs-string">&#x27;import sys, setuptools, tokenize; sys.argv[0] = &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;/private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/setup.py&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;; __file__=&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;/private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/setup.py&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;;f=getattr(tokenize, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;open&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;, open)(__file__);code=f.read().replace(&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;\r\n&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;\n&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;);f.close();exec(compile(code, __file__, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;exec&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;))&#x27;</span> bdist_wheel -d /private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-wheel-h9nj2cq8<br>       cwd: /private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/<br>  Complete output (16 lines):<br>  running bdist_wheel<br>  running build<br>  running build_py<br>  creating build<br>  creating build/lib.macosx-10.9-x86_64-3.8<br>  creating build/lib.macosx-10.9-x86_64-3.8/glove<br>  copying glove/__init__.py -&gt; build/lib.macosx-10.9-x86_64-3.8/glove<br>  copying glove/glove.py -&gt; build/lib.macosx-10.9-x86_64-3.8/glove<br>  copying glove/corpus.py -&gt; build/lib.macosx-10.9-x86_64-3.8/glove<br>  running build_ext<br>  building <span class="hljs-string">&#x27;glove.glove_cython&#x27;</span> extension<br>  creating build/temp.macosx-10.9-x86_64-3.8<br>  creating build/temp.macosx-10.9-x86_64-3.8/glove<br>  gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/admin/anaconda3/include -arch x86_64 -I/Users/admin/anaconda3/include -arch x86_64 -I/Users/admin/anaconda3/include/python3.8 -c glove/glove_cython.c -o build/temp.macosx-10.9-x86_64-3.8/glove/glove_cython.o -fopenmp -ffast-math -march=native<br>  clang: error: unsupported option <span class="hljs-string">&#x27;-fopenmp&#x27;</span><br>  error: <span class="hljs-built_in">command</span> <span class="hljs-string">&#x27;gcc&#x27;</span> failed with <span class="hljs-built_in">exit</span> status 1<br>  ----------------------------------------<br>  ERROR: Failed building wheel <span class="hljs-keyword">for</span> glove-python<br>  Running setup.py clean <span class="hljs-keyword">for</span> glove-python<br>  ERROR: Command errored out with <span class="hljs-built_in">exit</span> status 1:<br>   <span class="hljs-built_in">command</span>: /Users/admin/anaconda3/bin/python -u -c <span class="hljs-string">&#x27;import sys, setuptools, tokenize; sys.argv[0] = &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;/private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/setup.py&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;; __file__=&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;/private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/setup.py&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;;f=getattr(tokenize, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;open&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;, open)(__file__);code=f.read().replace(&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;\r\n&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;\n&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;);f.close();exec(compile(code, __file__, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;exec&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;))&#x27;</span> clean --all<br>       cwd: /private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5<br>  Complete output (6 lines):<br>  usage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]<br>     or: setup.py --<span class="hljs-built_in">help</span> [cmd1 cmd2 ...]<br>     or: setup.py --help-commands<br>     or: setup.py cmd --<span class="hljs-built_in">help</span><br><br>  error: option --all not recognized<br>  ----------------------------------------<br>  ERROR: Failed cleaning build dir <span class="hljs-keyword">for</span> glove-python<br>Failed to build glove-python<br>Installing collected packages: glove-python<br>    Running setup.py install <span class="hljs-keyword">for</span> glove-python ... error<br>    ERROR: Command errored out with <span class="hljs-built_in">exit</span> status 1:<br>     <span class="hljs-built_in">command</span>: /Users/admin/anaconda3/bin/python -u -c <span class="hljs-string">&#x27;import sys, setuptools, tokenize; sys.argv[0] = &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;/private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/setup.py&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;; __file__=&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;/private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/setup.py&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;;f=getattr(tokenize, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;open&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;, open)(__file__);code=f.read().replace(&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;\r\n&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;\n&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;);f.close();exec(compile(code, __file__, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;exec&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;))&#x27;</span> install --record /private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-record-xqhqx2mu/install-record.txt --single-version-externally-managed --compile --install-headers /Users/admin/anaconda3/include/python3.8/glove-python<br>         cwd: /private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/<br>    Complete output (8 lines):<br>    running install<br>    running build<br>    running build_py<br>    running build_ext<br>    building <span class="hljs-string">&#x27;glove.glove_cython&#x27;</span> extension<br>    gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/admin/anaconda3/include -arch x86_64 -I/Users/admin/anaconda3/include -arch x86_64 -I/Users/admin/anaconda3/include/python3.8 -c glove/glove_cython.c -o build/temp.macosx-10.9-x86_64-3.8/glove/glove_cython.o -fopenmp -ffast-math -march=native<br>    clang: error: unsupported option <span class="hljs-string">&#x27;-fopenmp&#x27;</span><br>    error: <span class="hljs-built_in">command</span> <span class="hljs-string">&#x27;gcc&#x27;</span> failed with <span class="hljs-built_in">exit</span> status 1<br>    ----------------------------------------<br>ERROR: Command errored out with <span class="hljs-built_in">exit</span> status 1: /Users/admin/anaconda3/bin/python -u -c <span class="hljs-string">&#x27;import sys, setuptools, tokenize; sys.argv[0] = &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;/private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/setup.py&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;; __file__=&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;/private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-install-2fe6uukp/glove-python_8391e48580964dc2926dbe627d33d1a5/setup.py&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;;f=getattr(tokenize, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;open&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;, open)(__file__);code=f.read().replace(&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;\r\n&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;\n&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;);f.close();exec(compile(code, __file__, &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;exec&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;))&#x27;</span> install --record /private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-record-xqhqx2mu/install-record.txt --single-version-externally-managed --compile --install-headers /Users/admin/anaconda3/include/python3.8/glove-python Check the logs <span class="hljs-keyword">for</span> full <span class="hljs-built_in">command</span> output.<br><br></code></pre></td></tr></table></figure><p>主要报错就是<code>command &#39;gcc&#39; failed with exit status 1</code></p><h2 id="踩坑-1-安装-gcc"><a href="#踩坑-1-安装-gcc" class="headerlink" title="踩坑 1 安装 gcc"></a>踩坑 1 安装 gcc</h2><p>因为报错是 gcc 的 error，发现电脑上并没有安装 gcc，于是<code>brew install gcc</code>安装得到 gcc 11.1.0<br>之后出现报错<code>clang: error: unsupported option &#39;-fopenmp&#39;</code>，故再去安装 clang-omp，报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">Error: No available formula with the name <span class="hljs-string">&quot;clang-omp&quot;</span><br>==&gt; Searching <span class="hljs-keyword">for</span> a previously deleted formula (<span class="hljs-keyword">in</span> the last month)...<br>Error: No previously deleted formula found.<br>==&gt; Searching <span class="hljs-keyword">for</span> similarly named formulae...<br>==&gt; Searching <span class="hljs-built_in">local</span> taps...<br>Error: No similarly named formulae found.<br>==&gt; Searching taps...<br>==&gt; Searching taps on GitHub...<br>Error: No formulae found <span class="hljs-keyword">in</span> taps.<br></code></pre></td></tr></table></figure><p>好家伙，原来 clang-omp 被迁移到了 llvm（这实在太麻烦了，违背作者的懒狗原则，故放弃）</p><h2 id="踩坑-2-试图舍近求远使用-anaconda"><a href="#踩坑-2-试图舍近求远使用-anaconda" class="headerlink" title="踩坑 2 试图舍近求远使用 anaconda"></a>踩坑 2 试图舍近求远使用 anaconda</h2><p>看到 stackoverflow 上有朋友说 glove 只支持 3.5 以下的 python，低头一看自己是个 3.7，于是寻求包管理工具的帮助。<br>先是去<code>brew install pyenv</code>，可怜地发现已经不支持新版的 osx 了，只能卑微向 anaconda 低头。</p><p>以前使用过 anaconda 的管理工具，但是觉得体量过大，一直很抗拒安装。但事已至此，希望 conda 能救一条老命。<br>安装 anaconda bash 的教程网上很多，主要问题出在了镜像源……</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">UnavailableInvalidChannel: The channel is not accessible or is invalid.<br></code></pre></td></tr></table></figure><p>好家伙一直以来用的清华镜像源似乎出现了问题，一搜发现<br><img src="https://raw.githubusercontent.com/MiracleZeroPenguin/images/main/img/20210525154924980.png" alt="在这里插入图片描述"><br>替换成中科大的镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/osx-64<br>conda config --add https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/osx-64<br></code></pre></td></tr></table></figure><p>好嘛，再次试图 install glove</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  ~ conda install python-glove<br>Collecting package metadata (current_repodata.json): <span class="hljs-keyword">done</span><br>Solving environment: failed with initial frozen solve. Retrying with flexible solve.<br>Collecting package metadata (repodata.json): <span class="hljs-keyword">done</span><br>Solving environment: failed with initial frozen solve. Retrying with flexible solve.<br><br>PackagesNotFoundError: The following packages are not available from current channels:<br><br>  - python-glove<br><br>Current channels:<br><br>  - https://mirrors.ustc.edu.cn/anaconda/pkgs/free/osx-64<br>  - https://mirrors.ustc.edu.cn/anaconda/pkgs/free/noarch<br>  - https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/osx-64<br>  - https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/noarch<br>  - https://repo.anaconda.com/pkgs/main/osx-64<br>  - https://repo.anaconda.com/pkgs/main/noarch<br>  - https://repo.anaconda.com/pkgs/r/osx-64<br>  - https://repo.anaconda.com/pkgs/r/noarch<br><br>To search <span class="hljs-keyword">for</span> alternate channels that may provide the conda package you<span class="hljs-string">&#x27;re</span><br><span class="hljs-string">looking for, navigate to</span><br><span class="hljs-string"></span><br><span class="hljs-string">    https://anaconda.org</span><br><span class="hljs-string"></span><br><span class="hljs-string">and use the search bar at the top of the page.</span><br></code></pre></td></tr></table></figure><p>查一查发现镜像源里根本没有 glove 这个库（也有可能是懒狗作者的操作不太正常）</p><h2 id="换-github-源"><a href="#换-github-源" class="headerlink" title="换 github 源"></a>换 github 源</h2><p>继续在 csdn/stackoverflow 上寻找可能的解决方案，发现 glove 的安装在很多 windows 电脑上可能出现问题，但 macos 的解决方案基本没有……<br>参考了一位博主在 windows 上的解决方案（<a href="https://blog.csdn.net/weixin_45072810/article/details/109783520）">https://blog.csdn.net/weixin_45072810/article/details/109783520）</a><br>现在似乎是成功安装了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) ➜  ~ pip3 install https://github.com/JonathanRaiman/glove/archive/master.zip<br>Collecting https://github.com/JonathanRaiman/glove/archive/master.zip<br>  Downloading https://github.com/JonathanRaiman/glove/archive/master.zip<br>     \ 5.7 kB 8.9 MB/s<br>Requirement already satisfied: cython <span class="hljs-keyword">in</span> ./anaconda3/lib/python3.8/site-packages (from glove==1.0.1) (0.29.23)<br>Requirement already satisfied: numpy <span class="hljs-keyword">in</span> ./anaconda3/lib/python3.8/site-packages (from glove==1.0.1) (1.20.1)<br>Building wheels <span class="hljs-keyword">for</span> collected packages: glove<br>  Building wheel <span class="hljs-keyword">for</span> glove (setup.py) ... <span class="hljs-keyword">done</span><br>  Created wheel <span class="hljs-keyword">for</span> glove: filename=glove-1.0.1-py3-none-any.whl size=4998 sha256=333928882f3857f80c341cdc50829d89e47fc7dcd58858ab03f5a68df490484d<br>  Stored <span class="hljs-keyword">in</span> directory: /private/var/folders/zb/bs3jp5756wx8bll4dj2bhg7w0000gp/T/pip-ephem-wheel-cache-nnihzarf/wheels/1c/f6/cf/371de84d071993d3402708a47a204d3022675d5761f8bf4b62<br>Successfully built glove<br>Installing collected packages: glove<br>Successfully installed glove-1.0.1<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>踩坑过于严重……</p>]]></content>
    
    
    <categories>
      
      <category>踩坑经历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>glove</tag>
      
      <tag>python</tag>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计量经济学 知识点汇总</title>
    <link href="/2020/08/31/%E8%AE%A1%E9%87%8F%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <url>/2020/08/31/%E8%AE%A1%E9%87%8F%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<object data="/pdfs/计量经济学.pdf" type="application/pdf" width="100%" height="877px">]]></content>
    
    
    <categories>
      
      <category>一些课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课程笔记</tag>
      
      <tag>金融</tag>
      
      <tag>计量经济学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学及其应用课程复习Kenneth H.Rosen</title>
    <link href="/2020/08/24/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E8%AF%BE%E7%A8%8B%E5%A4%8D%E4%B9%A0Kenneth-H-Rosen/"/>
    <url>/2020/08/24/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E8%AF%BE%E7%A8%8B%E5%A4%8D%E4%B9%A0Kenneth-H-Rosen/</url>
    
    <content type="html"><![CDATA[<h1 id="离散数学及其应用课程笔记"><a href="#离散数学及其应用课程笔记" class="headerlink" title="离散数学及其应用课程笔记"></a>离散数学及其应用课程笔记</h1><h2 id="chap1-The-Foundations-Logic-and-Proofs"><a href="#chap1-The-Foundations-Logic-and-Proofs" class="headerlink" title="chap1 The Foundations: Logic and Proofs"></a>chap1 The Foundations: Logic and Proofs</h2><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>proposition</td><td>命题</td><td>equivalence</td><td>等价式</td></tr><tr><td>predicate</td><td>谓词</td><td>quantifier</td><td>量词</td></tr><tr><td>inference</td><td>推理</td><td>negation</td><td>否定 NOT$\lnot$</td></tr><tr><td>conjunction</td><td>合取 AND$\land$</td><td>Disjunction</td><td>析取 OR$\lor$</td></tr><tr><td>Exclusive or</td><td>异或 XOR$\oplus$</td><td>Implication</td><td>IF-THEN$\rightarrow$</td></tr><tr><td>Biconditional</td><td>IF AND ONLY IF$\leftrightarrow$</td><td>hypothesis</td><td>假设</td></tr><tr><td>antecedent</td><td>前件</td><td>premise</td><td>前提</td></tr><tr><td>conclusion</td><td>结论</td><td>consequence</td><td>后件</td></tr><tr><td>converse</td><td>逆</td><td>contrapositive</td><td>逆否</td></tr><tr><td>inverse</td><td>反</td><td>bitwise</td><td>逐位</td></tr><tr><td>knight</td><td>骑士</td><td>knave</td><td>无赖</td></tr><tr><td>Tautologies</td><td>永真式</td><td>Contradictions</td><td>矛盾式</td></tr><tr><td>Contingencies</td><td>可能式</td><td>Normal Forms</td><td>范式</td></tr><tr><td>Dual</td><td>对偶式</td><td>Pierce arrow</td><td>或非$\downarrow$</td></tr><tr><td>Sheffer stroke</td><td>与非$</td><td>$</td><td>satisfiable</td><td></td></tr><tr><td>DNF</td><td>析取范式</td><td>CNF</td><td>合取范式</td></tr><tr><td>clause</td><td>子句</td><td>domain</td><td>论域</td></tr><tr><td>Universal Quantifier</td><td>全称量词$\forall$</td><td>Existential Quantifier</td><td>存在量词$\exists$</td></tr><tr><td>counterexample</td><td>反例</td><td>Uniqueness Quantifier</td><td>唯一性量词$\exists$!</td></tr><tr><td>scope</td><td>（变量的）作用域</td><td>nested</td><td>嵌套的</td></tr><tr><td>argument</td><td>论证</td><td>proof</td><td>证明</td></tr><tr><td>theorem</td><td>定理</td><td>axioms</td><td>公理</td></tr><tr><td>lemma</td><td>引理</td><td>corollary</td><td>推论</td></tr><tr><td></td><td>猜想</td><td>trivial</td><td>平凡证明</td></tr><tr><td>vacuous proof</td><td>空证明</td><td>rational number</td><td>有理数</td></tr><tr><td>without loss of generality</td><td>不失一般性</td><td></td></tr></tbody></table></div><ul><li>异或</li></ul><div class="table-container"><table><thead><tr><th>$p$</th><th>$q$</th><th>$p\oplus q$</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>F</td></tr><tr><td>T</td><td>F</td><td>T</td></tr><tr><td>F</td><td>T</td><td>T</td></tr><tr><td>F</td><td>F</td><td>F</td></tr></tbody></table></div><ul><li><p>IF p THEN q</p><p>p implies q</p><p>p only if q=q if p</p><p>q when p</p><p>q whenever p</p><p>q follows from p</p><p>p is sufficient for q 充分</p><p>q is necessary for p 必要</p><p>q unless $\lnot$p</p></li><li><p>逆、逆否、反</p></li></ul><div class="table-container"><table><thead><tr><th>符号</th><th>含义</th><th>定义</th></tr></thead><tbody><tr><td>$q\rightarrow p$</td><td>is the <strong>converse </strong>of $p\rightarrow q$</td><td>逆(左右颠倒)</td></tr><tr><td>$\lnot q\rightarrow \lnot p$</td><td>is the <strong>contrapositive</strong> of $p\rightarrow q$</td><td>逆否(与原命题等价)</td></tr><tr><td>$\lnot p\rightarrow \lnot q$</td><td>is the <strong>inverse</strong> of $p\rightarrow q$</td><td>反</td></tr></tbody></table></div><ul><li>优先级</li></ul><div class="table-container"><table><thead><tr><th>operator</th><th>precedence</th></tr></thead><tbody><tr><td>$\lnot$</td><td>1</td></tr><tr><td>$\land$</td><td>2</td></tr><tr><td>$\lor$</td><td>3</td></tr><tr><td>$\rightarrow$</td><td>4</td></tr><tr><td>$\leftrightarrow$</td><td>5</td></tr></tbody></table></div><ul><li><p>对偶式</p><p>$S=(p\lor \lnot q)\land r\land T$</p><p>$S^*=(p\land \lnot q)\lor r\lor F$</p><p>即所有 and 变成 or，所有 or 变成 and，所有 T 变成 F，所有 F 变成 T</p><p>$s\Leftrightarrow t$ if and only if $s^<em>\Leftrightarrow t^</em>$</p></li><li><p>功能完备符号：</p><p>$\{\lnot, \lor\}$、$\{\lnot, \land\}$、$\{|\}$、$\{\downarrow\}$</p></li><li><p>析取 DNF 范式：$(A_1\land A_2)\lor B_1\lor (C_1\land C_2)$</p><p>合取 CNF 范式：$(A_1\lor A_2)\land B_1\land (C_1\lor C_2)$</p></li><li><p>量词优先级比逻辑运算符更高</p></li><li><p>命题中的变量必须是 Bound variable（被赋值的或被量词约束的）</p></li></ul><p><img src="https://raw.githubusercontent.com/MiracleZeroPenguin/images/main/img/watermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pcmFjbGVfemVybw%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70.png" alt="在这里插入图片描述"></p><div class="table-container"><table><thead><tr><th></th><th></th><th>corresponding tautology</th></tr></thead><tbody><tr><td>Modus Ponens</td><td>假言推理</td><td>$(p\land(p\rightarrow q))\rightarrow q$</td></tr><tr><td>Modus Tollens</td><td>取拒式</td><td>$(\lnot q\land(p\rightarrow q))\rightarrow \lnot p$</td></tr><tr><td>Hypothetical Syllogism</td><td>假言三段论</td><td>$((p\rightarrow q)\land(q\rightarrow r))\rightarrow(p\rightarrow r)$</td></tr><tr><td>Disjunctive Syllogism</td><td>析取三段论</td><td>$(\lnot p\land(p\lor q))\rightarrow q$</td></tr><tr><td>Addition</td><td>附加律</td><td>$p\rightarrow (p\lor q)$</td></tr><tr><td>Simplification</td><td>简化律</td><td>$(p\land q)\rightarrow p$</td></tr><tr><td>Conjunction</td><td>合取律</td><td>$((p)\land(q))\rightarrow(p\land q)$</td></tr><tr><td>Resolution</td><td>消解律</td><td>$((\lnot p\lor r)\land(p\lor q))\rightarrow (r\lor q)$</td></tr></tbody></table></div><ul><li><p>平凡证明：$p\rightarrow T$ is $T$</p><p>空证明：$F\rightarrow q$ is $T$</p></li></ul><hr><h2 id="chap2-Basic-Structures-Sets-Functions-Sequences-Sums-and-Matrices"><a href="#chap2-Basic-Structures-Sets-Functions-Sequences-Sums-and-Matrices" class="headerlink" title="chap2 Basic Structures: Sets, Functions, Sequences, Sums, and Matrices"></a>chap2 Basic Structures: Sets, Functions, Sequences, Sums, and Matrices</h2><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>Sequences</td><td>序列</td><td>Summation</td><td>求和</td></tr><tr><td>Cardinality</td><td>基数</td><td>paradox</td><td>悖论</td></tr><tr><td>Power Set</td><td>幂集</td><td>tuple</td><td>有序元组</td></tr><tr><td>Cartesian Product</td><td>笛卡尔积</td><td>union</td><td>集合的并$\cup$</td></tr><tr><td>intersection</td><td>集合的交$\cap$</td><td>complement</td><td>集合的补$\bar A$</td></tr><tr><td>Inclusion-Exclusion</td><td>容斥原理</td><td>symmetric difference</td><td>对称差</td></tr><tr><td>Domain</td><td>定义域</td><td>Codomain</td><td>陪域、值域</td></tr><tr><td>Image</td><td>像</td><td>Preimage</td><td>原像</td></tr><tr><td>Injection</td><td>单射</td><td>Surjection</td><td>满射</td></tr><tr><td>Bijection</td><td>双射</td><td>Inverse Function</td><td>反函数</td></tr><tr><td>progression</td><td>级数</td><td>Recurrence Relations</td><td>递推关系</td></tr><tr><td>lexicographic</td><td>字典序</td><td>computable</td><td>可计算的</td></tr><tr><td>rectangular</td><td>矩形的</td><td>identity matrix</td><td>单位矩阵</td></tr><tr><td>transpose</td><td>转置</td><td>symmetric</td><td>对称的</td></tr></tbody></table></div><ul><li><p>集合的基数记为$\vert A\vert$，即集合中元素的个数</p></li><li><p>幂集$\mathcal{P}(A)$：集合中所有子集组成的集合，一个 n 个元素的集合的幂集有$2^n$个元素</p></li><li><p>两个元素的元组被称为 ordered pairs 序偶</p></li><li><p>笛卡尔积：$A\times B=\{(a,b)\vert a\in A \land b\in B\}$</p></li><li><p>对称差：$A\oplus B=(A-B)\cup(B-A)$</p></li><li><p>反函数的前提是原函数是双射的</p></li><li><p>$f\circ g(x)=f(g(x))$</p></li><li><p>$n!\sim \sqrt{2\pi n}(\frac n e)^n$</p></li></ul><div class="table-container"><table><thead><tr><th>Sum</th><th>Closed Form</th></tr></thead><tbody><tr><td>$\sum_{k=0}^n ar^k$</td><td>$\frac{ar^{n+1}-a}{r-1}, r\neq 1$</td></tr><tr><td>$\sum_{k=1}^n k$</td><td>$\frac{n(n+1)}2$</td></tr><tr><td>$\sum_{k=1}^n k^2$</td><td>$\frac{n(n+1)(n+2)}6$</td></tr><tr><td>$\sum_{k=1}^n k^3$</td><td>$\frac{n^2(n+1)^2}4$</td></tr><tr><td>$\sum_{k=0}^\infty x^k, \vert x\vert &lt;1$</td><td>$\frac 1{1-x}$</td></tr><tr><td>$\sum_{k=1}^\infty kx^{k-1}$</td><td>$\frac 1 {(1-x)^2}$</td></tr></tbody></table></div><ul><li><p>可数集：基是有限的或跟正整数集相同，则是可数的</p></li><li><p>一个无限且可数的集合的基被称为$\aleph_0$（可以跟正整数集建立一个一一对应的映射）</p></li><li><p>实数集的基为$\aleph_1$</p></li><li><p>一个集合的幂集的基，一定大于原集合的基</p></li></ul><hr><h2 id="chap3-Algorithms"><a href="#chap3-Algorithms" class="headerlink" title="chap3 Algorithms"></a>chap3 Algorithms</h2><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>Brute-Force</td><td>暴力算法</td><td>Tractable</td><td>易解</td></tr><tr><td>Intractable</td><td>难解</td><td>polynomial</td><td>多项式</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>Notation</th><th>Explaination</th></tr></thead><tbody><tr><td>Big-O:$f(x)$ is $O(g(x))$</td><td>$\vert f(x)\vert\leq C\vert g(x)\vert$</td></tr><tr><td>Big-Omega:$f(x)$ is $\Omega(g(x))$</td><td>$\vert f(x)\vert\geq C\vert g(x)\vert$</td></tr><tr><td>Big-Theta:$f(x)$ is $\Theta(g(x))$</td><td>$O(g(x)) \&amp; \Omega(g(x))$</td></tr></tbody></table></div><ul><li><p>NP 类：可以在多项式复杂度内被 check，但不能在多项式复杂度内解决</p></li><li><p>NP 完全类：if you find a polynomial time algorithm for one member of the class, it can be used to solve all the problems in the class</p></li></ul><hr><h2 id="chap5-Induction-and-recursion"><a href="#chap5-Induction-and-recursion" class="headerlink" title="chap5 Induction and recursion"></a>chap5 Induction and recursion</h2><ul><li>数学归纳法:$P(1)\land \forall k(P(k)\to P(k+1))\to \forall nP(n)$<ul><li>BASIC STEP:</li><li>INDUCTIVE STEP:</li><li>Hence,…</li></ul></li><li>每个简单多边形都会把一个区域变为内部区域和外部区域</li><li>任何一个简单多边形都有其内部的对角线（lemma）</li><li>良序性（正整数体系的公理）：A set is well ordered if every subset has a least element.<ul><li>数学归纳法和强归纳法与良序性的成立是等价的</li></ul></li></ul><hr><h2 id="chap6-Counting"><a href="#chap6-Counting" class="headerlink" title="chap6 Counting"></a>chap6 Counting</h2><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>Pigeonhole</td><td>鸽巢</td><td>Permutation</td><td>排列</td></tr><tr><td>Combination</td><td>组合</td><td>Binomial Coefficient</td><td>二项系数</td></tr><tr><td>distinguishable</td><td>可分辨的</td><td></td></tr></tbody></table></div><ul><li><p>排列：$P(n,r)=\frac{n!}{(n-r)!}$</p></li><li><p>组合：$C(n,r)=\frac{n!}{(n-r)! r!}$</p></li><li><p>二项式定理：$(x+y)^n=\Sigma_{j=0}^n \begin{pmatrix} n\\j \end{pmatrix}x^{n-j}y^j$</p></li><li><p>$\Sigma_{k=1}^n(-1)^k \begin{pmatrix}n\\k\end{pmatrix}=0$</p></li><li><p>帕斯卡定理：$\begin{pmatrix}n+1\\k\end{pmatrix}=\begin{pmatrix}n\\k-1\end{pmatrix}+\begin{pmatrix}n\\k\end{pmatrix}$</p></li><li><p>Vandermonde’s：$\begin{pmatrix}m+n\\r\end{pmatrix}=\Sigma_{k=0}^r\begin{pmatrix}m\\r-k\end{pmatrix}\begin{pmatrix}n\\k\end{pmatrix}$</p><ul><li>推论：$\begin{pmatrix}2n\\n\end{pmatrix}=\Sigma_{k=0}^n\begin{pmatrix}n\\k\end{pmatrix}^2$</li></ul></li><li><p>有 n 种饼干，取出共 r 个饼干的组合数量为：$C(n+r-1,r)$</p></li><li><p>n 个物体，k 个盒子：</p></li></ul><div class="table-container"><table><thead><tr><th>n 个物体</th><th>r 个盒子</th><th>数量</th></tr></thead><tbody><tr><td>不同</td><td>不同</td><td>$\frac{n!}{n_1!n_2!··n_k!}$</td></tr><tr><td>相同</td><td>不同</td><td>$C(n+r-1,n-1)$</td></tr><tr><td>不同</td><td>相同</td><td>—</td></tr><tr><td>相同</td><td>相同</td><td>—</td></tr></tbody></table></div><hr><h2 id="chap8-Advanced-Counting-Techniques"><a href="#chap8-Advanced-Counting-Techniques" class="headerlink" title="chap8 Advanced Counting Techniques"></a>chap8 Advanced Counting Techniques</h2><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>Homogeneous</td><td>齐次的</td><td>Nonhomogeneous</td><td>非齐次的</td></tr><tr><td>generating function</td><td>生成函数</td><td>Inclusion-Exclusion</td><td>容斥原理</td></tr><tr><td>Derangement</td><td>错位排序</td><td></td></tr></tbody></table></div><ul><li><p>degree：$a_n=a_{n-1}+a_{n-8}$的 degree 为 8</p><p>a recurrence relation of degree 8</p></li><li><p>Hanoi 汉诺塔（3 个柱子）：$H_n=2^n-1$</p></li><li><p>齐次：每个 x 都是 1 次方的</p></li><li><p>非齐次公式：</p><p>如果递推关系是为：$a_n=c_1a_{n-1}+c_2a_{a-2}+···+c_ka_{n-k}+F(n)$</p><p>非齐次项$F(n)$可以被记为$F(n)=(b_tn^t+b_{t-1}n^{t-1}+···+b_1n+b_0)s^n$</p><p>如果 s 是$a_n=c_1a_{n-1}+c_2a_{a-2}+···+c_ka_{n-k}$的一个根，m 为次数，最后的特解可以被记为：$f(n)=n^m(p_tn^t+p_{t-1}n^{t-1}+···+p_1n+p_0)s^n$</p><p>如果 s 不是是$a_n=c_1a_{n-1}+c_2a_{a-2}+···+c_ka_{n-k}$的一个根，最后的特解可以被记为：$f(n)=(p_tn^t+p_{t-1}n^{t-1}+···+p_1n+p_0)s^n$</p><blockquote><p>例如</p><hr><p>$a_n=6a_{n-1}-9a_{n-2}+F(n)$</p><p>$F(n)=(n^2+1)3^n$</p><p>则$m=2, s=3, f(n)=n^2(p_2n^2+p_1n+p_0)3^n $（s=3 为一个根）</p><hr><p>$a_n=6a_{n-1}-9a_{n-2}+F(n)$</p><p>$F(n)=n^22^n$</p><p>则$s=2, f(n)=(p_2n^2+p_1n+p_0)2^n $（s=2 不是一个根）</p></blockquote></li><li><p>分治算法复杂度：</p><p>$f(n)=af(n/b)+cn^d$</p><script type="math/tex; mode=display">f(n) \text{ is }\begin{cases}O(n^d)& \text{if}& a<b^d\\O(n^d\log n)& \text{if}& a=b^d\\O(n^{\log_ba})& \text{if}& a>b^d\end{cases}</script></li><li><p>生成函数：</p><script type="math/tex; mode=display">f(x)=\Sigma_{k=0}^\infty a_kx^k,g(x)=\Sigma_{k=0}^\infty b_kx^k</script><ol><li>$f(x)+g(x)=\Sigma_{k=0}^\infty(a_k+b_k)x^k$</li><li>$\alpha\cdot f(x)=\Sigma_{k=0}^\infty\alpha \cdot a_kx^k$</li><li>$x\cdot f’(x)=\Sigma_{k=0}^\infty k \cdot a_kx^k$</li><li>$f(\alpha x)=\Sigma_{k=0}^\infty \alpha^k\cdot a_k x^k$</li><li>$f(x)g(x)=\Sigma_{k=0}^\infty(\Sigma_{j=0}^k a_j b_{k-j}x^k)$</li></ol></li><li><p>广义二项式定理：</p><script type="math/tex; mode=display">\begin{pmatrix}u\\k\end{pmatrix}=\begin{cases}u(u-1)···(u-k+1)/k!& \text{if} &k>0\\1&\text{if} & k=0\end{cases}</script><script type="math/tex; mode=display">(1+x)^u=\Sigma_{k=0}^\infty\begin{pmatrix}u\\k\end{pmatrix}x^k</script><blockquote><p>例如</p><p>请找到$(1+x)^{-n}$的生成函数</p><hr><script type="math/tex; mode=display">\begin{aligned}(1+x)^{-n}&=\Sigma_{k=0}^{-n}\begin{pmatrix}-n\\k\end{pmatrix}x^k\\&=\Sigma_{k=0}^{-n}(-1)^kC(n+k-1,k)x^k\end{aligned}</script></blockquote></li></ul><p><img src="https://raw.githubusercontent.com/MiracleZeroPenguin/images/main/img/watermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pcmFjbGVfemVybw%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70-20211206191543634.png" alt="在这里插入图片描述"></p><ul><li>n 元素集合的错位排序个数：$D_n=n![1-\frac{1}{1!}+\frac 1{2!}-\frac 1{3!}+···+(-1)^n\frac 1 {n!}]$</li></ul><hr><h2 id="chap9-Relations"><a href="#chap9-Relations" class="headerlink" title="chap9 Relations"></a>chap9 Relations</h2><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>properties</td><td>性质</td><td>closure</td><td>闭包</td></tr><tr><td>reflexive</td><td>自反的</td><td>symmetric</td><td>对称的</td></tr><tr><td>antisymmetic</td><td>反对称的</td><td>transitive</td><td>可传递的</td></tr><tr><td>Composition</td><td>组合</td><td>diagonal</td><td>对角线上</td></tr><tr><td>Equivalence</td><td>等价</td><td>Congruence</td><td>同余</td></tr><tr><td>representive</td><td>代表元</td><td>partition</td><td>划分</td></tr><tr><td>partial ordering</td><td>偏序</td><td>hasse diagram</td><td>哈塞图</td></tr><tr><td>lattices</td><td>格</td><td>total order/linear order</td><td>全序/线序$\preccurlyeq$</td></tr><tr><td>chain</td><td>链</td><td>maximal</td><td>极大元</td></tr><tr><td>minimal</td><td>极小元</td><td>greatest element</td><td>最大元</td></tr><tr><td>least element</td><td>最小元</td><td>compatible</td><td>兼容的</td></tr></tbody></table></div><ul><li><p>集合的性质</p><ul><li><p>自反性 Reflexive</p><p>$(a,a)\in R$，$\forall x[x\in U\to(x,x)\in R]$</p><p>空集上的空关系是自反的</p></li><li><p>对称性 Symmetric</p><p>$\forall x \forall y[(x,y)\in R \to (y,x)\in R]$</p></li><li><p>反对称性 Antisymmetric</p><p>$\forall x \forall y[(x,y)\in R\land(y,x)\in R \to x=y]$</p><p>不存在除了自反之外的对称关系</p></li><li><p>传递性 Transitive</p><p>$\forall x \forall y\forall z [(x,y)\in R \land (y,z)\in R\to (x,z)\in R]$</p></li></ul></li><li><p>$R^n\subset R\leftrightarrow \text{R is transitive}$</p></li><li><p>逆关系：$R^{-1}=\{(a,b)|(b,a)\in R\}$</p></li><li><p>关系操作：</p><ul><li>$(R\cup S)^{-1}=R^{-1}\cup S^{-1}$</li><li>$(R\cap S)^{-1}=R^{-1}\cap S^{-1}$</li><li>$(\overline R)^{-1}=\overline{(R^{-1})}$</li><li>$(A\times B)^{-1}=B\times A$</li></ul></li><li><p>transitive closure：</p><p>连通关系 connectivity relation：$R^*=\cup _1 ^\infty R^n$</p><p>关系的传递闭包就是关系的连通关系$R^*=t(R)$</p></li><li><p>等价关系：自反、对称且传递</p><p>$a\text{~}b$</p></li><li><p>R 为集合 A 上的一个等价关系，则在集合 A 中与元素 a 相关的所有元素可以被表示为$[a]_R$（等价类）</p><script type="math/tex; mode=display">[a]_R=\{s|(a,s)\in R\}</script></li><li><p>代表元：等价类中的任何一个元素都可以被成为代表元</p></li><li><p>集合的划分：$pr(A)=\{A_i|i\in I\}$</p></li><li><p>$R_1$、$R_2$为 A 上的两个等价关系，则$R_1\cup R_2$是 A 上的自反、对称关系，$(R_1\cup R_2)^*$是自反、对称、传递关系即等价关系</p></li><li><p>偏序关系：自反、传递、==反对称==（分大小的不平等关系）</p><ul><li>$poset(S,\preccurlyeq)$：定义在集合 S 上的一个偏序关系</li><li>如果集合中任意两个元素都是可比的，则成为全序、线序，整个集合被称为一个链</li><li>良序：拥有最小元素</li><li>极小（大）元：没有一个小于它</li><li>最小（大）元：所有元素都大于等于它</li><li>格：任意一对元素都拥有最大上界和最小下界的偏序集，被称为一个格</li></ul></li></ul><hr><h2 id="chap10-Graphs"><a href="#chap10-Graphs" class="headerlink" title="chap10 Graphs"></a>chap10 Graphs</h2><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>vertice</td><td>顶点</td><td>edge</td><td>边</td></tr><tr><td>endpoint</td><td>端点</td><td>multigraph</td><td>多重图</td></tr><tr><td>pseudograph</td><td>伪图</td><td>adjacent</td><td>相邻顶点</td></tr><tr><td>incident</td><td>关联</td><td>pendant</td><td>悬挂</td></tr><tr><td>in degree</td><td>入度</td><td>out degree</td><td>出度</td></tr><tr><td>Bipartite</td><td>二分图</td><td>regular graph</td><td>正规图</td></tr><tr><td>proper subgraph</td><td>真子图</td><td>Isomorphism</td><td>同构</td></tr><tr><td>path</td><td>通路</td><td>connected component</td><td>连通部分</td></tr><tr><td>articulation point</td><td>割点</td><td>Approximation algorithm</td><td>近似算法</td></tr><tr><td>planer</td><td>平面图</td><td>region</td><td>区域</td></tr><tr><td>Elementary subdivision</td><td>初等细分</td><td>Homeomorphic</td><td>同胚</td></tr><tr><td>dual graph</td><td>对偶图</td><td>chromatic number</td><td>着色数</td></tr></tbody></table></div><ul><li>$G=(V,E)$</li><li><p>无向图分类：</p><ul><li>简单图：没有环，没有多重边</li><li>多重图：没有环，可以有多重边</li><li>伪图：可以有环和多重边</li></ul></li><li><p>有关图的术语：</p><ul><li>adjacent：两个顶点之间有边相连，则称这两个顶点相关联</li><li>incident with vertices u and v：这条边连接了顶点 u 和 v</li><li>loop：环</li><li>degree of a vertex 顶点的度：在无向图中即为有多少条边与这个点关联（==环算两个度==）<ul><li>$deg(v)=0$，v is isolated</li><li>$deg(v)=1$，v is pendant</li></ul></li><li>无向图中，$\Sigma_{v\in V}deg(v)=2e$<ul><li>无向图中，偶数个顶点是奇数个度</li></ul></li><li>有向图中，一条边的起点 initial vertex，终点 terminal vertex<ul><li>$\Sigma_{v\in V}deg^+(v)=\Sigma_{v\in V}deg^-(v)=E$</li></ul></li></ul></li><li>一些特殊的图：<ul><li>完全图$K_n$：每对顶点之间有且只有一条边相连</li><li>圈图$C_n$：n 个顶点围成一个圈首尾相连</li><li>轮图$W_n$：在圈图中间加个点</li><li>立方图$Q_n$</li></ul></li><li>完全二分图$K_{mn}$:两组集合中每个点都与对面任意一个点相连</li><li>正规图：每个顶点的度都相同</li><li><p>induced subgraph 诱导子图：当且仅当子图中的边都在原图里，仅删除与子图中不存在的顶点相连的边</p></li><li><p>Incidence matrices 关联矩阵：纵坐标为顶点，横坐标为边，针对无向图</p></li><li>path is simple：没有一条边被重复的通路<ul><li>单个顶点的通路长度为 0</li></ul></li><li>图的连通：任意一对顶点间都有 path</li><li>割点：关节点，删去后会增加 connected components 的个数</li><li>割边/桥：关节边，删去后会增加 connected components 的个数</li><li><p>任何一个强连通的有向图都是弱连通的，可以把弱连通看作无向图，而强连通指有向图每对顶点间都双向连通</p><ul><li>strongly connected components/strong components：有向图中的最大强连接子图</li></ul></li><li><p>欧拉回路：遍历所有的边，每条边只访问一遍</p><ul><li>区别欧拉通路和欧拉回路：是否要求回到原点</li><li>欧拉图：包含欧拉回路的图</li><li>对于无向图：<ul><li><u>==欧拉回路充要条件==：当且仅当每个顶点都是偶数个度</u></li><li><u>==欧拉通路充要条件==：当且仅当只有 2 个顶点是奇数个度</u></li></ul></li><li>对于有向图<ul><li><u>==欧拉回路==：弱连接+出度与入度相同</u></li><li><u>==欧拉通路==：弱连接+起点的出度多一个，终点的入度多一个</u></li></ul></li></ul></li><li><p>哈密尔顿问题：遍历所有点，每个点只访问一遍</p><ul><li>还有没充要条件</li><li>充分条件（满足条件则一定有，不满足也可能有）：<ul><li>狄拉克定理：$\forall v\in V, deg(v)\geq \frac n 2$则有哈密尔顿通路</li><li>欧尔定理：$\forall 不相邻顶点v,u\in V, deg(v)+deg(u)\geq n$</li></ul></li><li>必要条件（用于判断不是哈密尔顿）：<ul><li>连通图，每个顶点的度都必须大于等于 1</li><li>最多只有两个顶点的度是 1</li><li>如果一个顶点的度为 2，则两条边都为哈密尔顿回路的一部分</li><li>从顶点集合 V 中去掉一组顶点 S，则新图的连接部分数量&lt;=S 的个数</li></ul></li></ul></li><li><p>weighted graph 加权图：$G=(V,E,W)$</p></li><li><p>Dijkstra:寻找最短路径，要求所有路径都是正权重的</p><ul><li>iterative</li><li>$L_k(v)=\min\{L_{k-1}(v),L_{k-1}(u)+w(u,v)\}$</li><li>$O(n^2)$</li></ul></li><li><p>旅行商问题</p><ul><li>最短的哈密尔顿回路</li><li>近似算法</li></ul></li><li><p>平面图：可以画在平面上且边与边不交叉</p></li><li><p>区域 Region：包括有界区域和无界区域</p></li><li><p>==<strong>欧拉公式</strong>==：对于连通的平面简单图</p><script type="math/tex; mode=display">r=e-v+2</script><p>对于非平面图也可能成立</p></li><li><p>区域的度：区域边的总数（绕一圈的边的总数）</p><ul><li><p>推论 1：</p><script type="math/tex; mode=display">e\leq 3v-6,\text{if }v\geq 3</script><p>对于不连通的平面简单图也成立</p></li><li><p>推论 2：对于一个平面简单图，G 一定有一个顶点的度不超过 5</p></li><li><p>推论 3：对于一个平面简单图，如果任何一个回路的长度都大于 3，则$e\leq 2v-4$</p></li></ul></li><li><p>Kuratowski 定理</p><ul><li>初等细分：增加原有道路上的细分点</li><li>同胚：可以通过一系列的初等细分所获得的图</li><li>一个图是非平面的$\Leftrightarrow$包含一个与$K_{3,3}$或$K_5$同胚的子图</li></ul></li><li><p>着色问题</p><ul><li>地图的对偶图，相邻的区域间连线</li><li>等价于对偶图的顶点着色，使每条边上的两个顶点不同颜色</li><li>最少着色数记为$\chi(G)$</li><li>==四色定理==：一个<u>平面图</u>的着色数不超过 4</li></ul></li></ul><hr><h2 id="chap11-Trees"><a href="#chap11-Trees" class="headerlink" title="chap11 Trees"></a>chap11 Trees</h2><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>root</td><td>根</td><td>internal vertice</td><td>有孩子的节点</td></tr><tr><td>subtrees</td><td>子树</td><td>isomorphic</td><td>同构的</td></tr><tr><td>preorder</td><td>前序</td><td>inorder</td><td>中序</td></tr><tr><td>postorder</td><td>后序</td><td>spanning tree</td><td>生成树</td></tr><tr><td>backtracking</td><td>回溯</td><td></td></tr></tbody></table></div><ul><li>树：没有简单回路的连通无向图</li><li><p>无向图是一棵树$\Leftrightarrow$每两个顶点之间都有唯一的简单通路</p></li><li><p>满 m 叉树：每个中间节点都有 m 个孩子</p></li><li><p>树的同构：</p><ul><li>根树的同构（有向图的同构）</li><li>无根树的同构（无向图的同构）</li></ul></li><li><p>树的性质：</p><ul><li>n 个顶点的树就有 n-1 条边</li><li>一个有 i 个内节点的满 m 叉树有$mi+1$和顶点</li><li>树一定是个二分图</li></ul></li><li><p>二叉搜索树</p><ul><li>插入一个新节点，最多发生$\lceil \log(n+1)\rceil$次比较</li></ul></li><li><p>决策树</p><ul><li>由一系列节点生成一个解</li></ul></li><li><p>prefix code</p><ul><li>huffman code</li></ul></li><li><p>生成树</p><ul><li>一个简单图是连通的$\Leftrightarrow$包含一个生成树</li><li>DFS 深度优先搜索（回溯）会形成一个根树</li><li>BFS 广度优先搜索</li></ul></li><li><p>最小生成树</p><ul><li>Prim 算法：找与已经连接的生成树距离最短的点，直到完全连通，$O(E\log(V))$</li><li>Kruskal 算法：找现存的最短边（不会产生回路），直到完全联通，$O(V\log(E))$</li></ul></li><li><p>树：没有简单回路的连通无向图</p></li><li><p>无向图是一棵树$\Leftrightarrow$每两个顶点之间都有唯一的简单通路</p></li><li><p>满 m 叉树：每个中间节点都有 m 个孩子</p></li><li><p>树的同构：</p><ul><li>根树的同构（有向图的同构）</li><li>无根树的同构（无向图的同构）</li></ul></li><li><p>树的性质：</p><ul><li>n 个顶点的树就有 n-1 条边</li><li>一个有 i 个内节点的满 m 叉树有$mi+1$和顶点</li><li>树一定是个二分图</li></ul></li><li><p>二叉搜索树</p><ul><li>插入一个新节点，最多发生$\lceil \log(n+1)\rceil$次比较</li></ul></li><li><p>决策树</p><ul><li>由一系列节点生成一个解</li></ul></li><li><p>prefix code</p><ul><li>huffman code</li></ul></li><li><p>生成树</p><ul><li>一个简单图是连通的$\Leftrightarrow$包含一个生成树</li><li>DFS 深度优先搜索（回溯）会形成一个根树</li><li>BFS 广度优先搜索</li></ul></li><li><p>最小生成树</p><ul><li>Prim 算法：找与已经连接的生成树距离最短的点，直到完全连通，$O(E\log(V))$</li><li>Kruskal 算法：找现存的最短边（不会产生回路），直到完全联通，$O(V\log(E))$</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>一些课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>课程笔记</tag>
      
      <tag>离散数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构基础fds 课程笔记</title>
    <link href="/2020/07/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80fds-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/07/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80fds-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="DataStructure-课程笔记-数据结构基础-fds"><a href="#DataStructure-课程笔记-数据结构基础-fds" class="headerlink" title="DataStructure 课程笔记 数据结构基础 fds"></a>DataStructure 课程笔记 数据结构基础 fds</h1><h2 id="chap02-Algorithm-Analysis"><a href="#chap02-Algorithm-Analysis" class="headerlink" title="chap02 Algorithm Analysis"></a>chap02 Algorithm Analysis</h2><div class="table-container"><table><thead><tr><th>$T(N)=O(f(N))$</th><th>$T(N)\leq c f(N)$</th></tr></thead><tbody><tr><td>$T(N)=\Omega(f(N))$</td><td>$T(N)\geq c f(N)$</td></tr><tr><td>$T(N)=\Theta(f(N))$</td><td>$T(N)= c f(N)$</td></tr><tr><td>$T(N)=o(f(N))$</td><td>$T(N)=O(f(N))$ and $T(N)\neq\Theta(f(N))$</td></tr></tbody></table></div><ul><li>$\log^kN=O(N)$: algorithm grows very slowly.</li></ul><h2 id="chap03-ADT-List"><a href="#chap03-ADT-List" class="headerlink" title="chap03 ADT-List"></a>chap03 ADT-List</h2><ul><li><p>ADT 抽象数据类型</p></li><li><p>The cursor implementation is usually significantly faster because of the lack of memory management routines.</p></li><li><p>链表：先放在前，后放在后</p></li><li><p>Add Two Polynomials</p><ul><li>多项式加法函数</li></ul></li><li><p>Reverse Linked List</p><ul><li>单向链表转置</li></ul></li><li><p>stack：后放在上</p><ul><li><p>A Pop on an empty stack is an error in the stack ADT.</p></li><li><p>Push on a full stack is an implementation error but not an ADT error.</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">StackRecord</span> &#123;</span><br><span class="hljs-keyword">int</span> Capacity ; <span class="hljs-comment">/* size of stack */</span><br><span class="hljs-keyword">int</span> TopOfStack; <span class="hljs-comment">/* the top pointer */</span><br><span class="hljs-comment">/* ++ for push, -- for pop, -1 for empty stack */</span><br>ElementType *Array; <span class="hljs-comment">/* array for stack elements */</span><br> &#125; ;<br><br></code></pre></td></tr></table></figure></li><li><p>The stack model must be well encapsulated（封装）</p></li><li><p>表达式</p></li></ul><div class="table-container"><table><thead><tr><th>infix 中序</th><th>$a+b*c-d/e$</th></tr></thead><tbody><tr><td>prefix 前序</td><td><script type="math/tex">-+a*bc/de</script></td></tr><tr><td>postfix 后序</td><td>$abc*+de/-$</td></tr></tbody></table></div><ul><li><p>尾递归一定能变成循环</p></li><li><p>queue：两边开，先入先出，后入后出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">QueueRecord</span> &#123;</span><br><span class="hljs-keyword">int</span> Capacity ;   <span class="hljs-comment">/* max size of queue */</span><br><span class="hljs-keyword">int</span> Front;  <span class="hljs-comment">/* 队列头预制0，指向最老元素 */</span><br><span class="hljs-keyword">int</span> Rear;   <span class="hljs-comment">/* 队列尾预制-1，指向最新元素 */</span><br><span class="hljs-keyword">int</span> Size;  <span class="hljs-comment">/* Optional - the current size of queue */</span><br>ElementType *Array;    <span class="hljs-comment">/* array for queue elements */</span><br> &#125; ;<br></code></pre></td></tr></table></figure></li><li><p>循环队列需要保留一个空位</p></li><li><p>Evaluate Postfix Expression</p><ul><li>后序表达式计算</li></ul></li><li><p>Deque</p><ul><li>双向队列</li></ul></li><li><p>Pop Sequence</p><ul><li>检查是否可以这样 pop</li></ul></li></ul><h2 id="chap04-Binary-Tree-amp-Search-Tree"><a href="#chap04-Binary-Tree-amp-Search-Tree" class="headerlink" title="chap04 Binary Tree&amp; Search Tree"></a>chap04 Binary Tree&amp; Search Tree</h2><h3 id="4-1-Binary-Tree"><a href="#4-1-Binary-Tree" class="headerlink" title="4.1 Binary Tree"></a>4.1 Binary Tree</h3><ul><li>There are $N-1$ edges in a tree with $N$ nodes.</li><li>degree<ul><li>of node: 有几个儿子</li><li>of tree: 树中拥有对多个儿子的节点的 degree</li></ul></li><li>length of path: 一路上有多少条边</li><li>$Depth(root) = 0$</li><li>$Height(leaf) = 0$</li><li>第$i$层最多有节点$2^{i-1}$个</li><li>深度为$k$的树最多有节点$2^k-1$个</li><li>threaded binary trees 搜索二叉树，前序/中序/后续<ul><li>左指针指向遍历的前一个，右指针指向后一个</li></ul></li></ul><h3 id="4-2-Search-Tree"><a href="#4-2-Search-Tree" class="headerlink" title="4.2 Search Tree"></a>4.2 Search Tree</h3><ul><li>Binary Search Tree：左小右大，互不相同</li><li>Isomorphic<ul><li>树的对称</li></ul></li><li>traversal<ul><li>O(N)</li><li>前序 preorder</li><li>中序 inorder</li><li>后序 postorder</li><li>层级 level</li></ul></li><li>ZigZagging on a Tree</li><li>Check BST<ul><li>判断是否为 BST</li><li>返回层数 level</li></ul></li><li>Binary Search Tree<ul><li>建立 BST</li><li>判断两 BST 是否一样</li></ul></li><li>线索二叉树<ul><li>记 ptr 指向二叉链表中的一个结点，以下是建立线索的规则：<br>（1）如果 ptr-&gt;lchild 为空，则存放指向中序遍历序列中该结点的前驱结点。这个结点称为 ptr 的中序前驱；<br>（2）如果 ptr-&gt;rchild 为空，则存放指向中序遍历序列中该结点的后继结点。这个结点称为 ptr 的中序后继；</li></ul></li></ul><h2 id="chap05-Priority-Queues"><a href="#chap05-Priority-Queues" class="headerlink" title="chap05 Priority Queues"></a>chap05 Priority Queues</h2><ul><li><p>完全二叉树高为$h$, 节点数$2^h$到$2^{h+1}-1$</p></li><li><p>$h=\lfloor \log N\rfloor$</p></li><li><p>最小堆/最大堆排序</p><ul><li>时间复杂度$\log_2 N$</li></ul></li><li><p>d-heap</p><ul><li>每个节点有 d 个孩子</li><li>时间复杂度$d\log_dN$</li><li>$i$的父亲$⌊(i+d−2)/d⌋$, 第一个儿子$ (i−1)d+2$, 最后一个儿子$ id+1$</li></ul></li><li><p>Percolate Up and Down</p></li><li><p>Complete Binary Search Tree</p><ul><li>完全二叉搜索树建立</li><li>树的前序遍历</li></ul></li></ul><h2 id="chap06-Sort"><a href="#chap06-Sort" class="headerlink" title="chap06 Sort"></a>chap06 Sort</h2><p><img src="https://raw.githubusercontent.com/MiracleZeroPenguin/images/main/img/format%2Cpng.png" alt="img"></p><h3 id="6-1-Shellsort"><a href="#6-1-Shellsort" class="headerlink" title="6.1 Shellsort"></a>6.1 Shellsort</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Shellsort</span><span class="hljs-params">( ElementType A[ ], <span class="hljs-keyword">int</span> N )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span>  i, j, Increment;<br>    ElementType  Tmp;<br>    <span class="hljs-keyword">for</span> ( Increment = N / <span class="hljs-number">2</span>; Increment &gt; <span class="hljs-number">0</span>; Increment /= <span class="hljs-number">2</span> )<br><span class="hljs-comment">/*h sequence */</span><br><span class="hljs-keyword">for</span> ( i = Increment; i &lt; N; i++ ) &#123; <span class="hljs-comment">/* insertion sort */</span><br>        Tmp = A[ i ];<br>     <span class="hljs-keyword">for</span> ( j = i; j &gt;= Increment; j - = Increment )<br>             <span class="hljs-keyword">if</span>( Tmp &lt; A[ j - Increment ] )<br>                 A[ j ] = A[ j - Increment ];<br>        <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">break</span>;<br>A[ j ] = Tmp;<br>&#125; <span class="hljs-comment">/* end for-I and for-Increment loops */</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>第一次间隔为$\lfloor N/2\rfloor$</p><p>后面每一次的间隔为前一次的一半</p><h3 id="6-2-Heapsort"><a href="#6-2-Heapsort" class="headerlink" title="6.2 Heapsort"></a>6.2 Heapsort</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Heapsort</span><span class="hljs-params">( ElementType A[ ], <span class="hljs-keyword">int</span> N )</span></span><br><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span> ( i = N / <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i - - ) <span class="hljs-comment">/* BuildHeap */</span><br>        PercDown( A, i, N );<br>    <span class="hljs-keyword">for</span> ( i = N - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i - - ) &#123;<br>        Swap( &amp;A[ <span class="hljs-number">0</span> ], &amp;A[ i ] ); <span class="hljs-comment">/* DeleteMax */</span><br>        PercDown( A, <span class="hljs-number">0</span>, i );<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-3-Mergesort"><a href="#6-3-Mergesort" class="headerlink" title="6.3 Mergesort"></a>6.3 Mergesort</h3><ul><li>需要额外线性空间</li><li>O( N + N log N )次归并</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MSort</span><span class="hljs-params">( ElementType A[ ], ElementType TmpArray[ ],</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">int</span> Left, <span class="hljs-keyword">int</span> Right )</span></span><br><span class="hljs-function"></span>&#123;   <span class="hljs-keyword">int</span>  Center;<br>    <span class="hljs-keyword">if</span> ( Left &lt; Right ) &#123;  <span class="hljs-comment">/* if there are elements to be sorted */</span><br>Center = ( Left + Right ) / <span class="hljs-number">2</span>;<br>MSort( A, TmpArray, Left, Center ); <span class="hljs-comment">/* T( N / 2 ) */</span><br>MSort( A, TmpArray, Center + <span class="hljs-number">1</span>, Right ); <span class="hljs-comment">/* T( N / 2 ) */</span><br>Merge( A, TmpArray, Left, Center + <span class="hljs-number">1</span>, Right );  <span class="hljs-comment">/* O( N ) */</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Mergesort</span><span class="hljs-params">( ElementType A[ ], <span class="hljs-keyword">int</span> N )</span></span><br><span class="hljs-function"></span>&#123;   ElementType  *TmpArray;  <span class="hljs-comment">/* need O(N) extra space */</span><br>    TmpArray = <span class="hljs-built_in">malloc</span>( N * <span class="hljs-keyword">sizeof</span>( ElementType ) );<br>    <span class="hljs-keyword">if</span> ( TmpArray != <span class="hljs-literal">NULL</span> ) &#123;<br>MSort( A, TmpArray, <span class="hljs-number">0</span>, N - <span class="hljs-number">1</span> );<br><span class="hljs-built_in">free</span>( TmpArray );<br>    &#125;<br>    <span class="hljs-keyword">else</span>  FatalError( <span class="hljs-string">&quot;No space for tmp array!!!&quot;</span> );<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>Iterative Mergesort<ul><li>归并排序，每归并一次输出一次</li></ul></li></ul><h3 id="6-4-Quiksort"><a href="#6-4-Quiksort" class="headerlink" title="6.4 Quiksort"></a>6.4 Quiksort</h3><ul><li>找一个基准，然后从右到左找一个比基准大的，从左到右找一个比基准小的，交换，一轮结束后，基准左边再做快排，右边也做快排</li><li>数量少的时候插入排序更快</li></ul><h3 id="6-5-Tablesort"><a href="#6-5-Tablesort" class="headerlink" title="6.5 Tablesort"></a>6.5 Tablesort</h3><p>In the worst case there are $\lfloor N/2\rfloor $ cycles and requires $\lfloor 3N/2\rfloor$ record moves.</p><h3 id="6-6-Bucketsort"><a href="#6-6-Bucketsort" class="headerlink" title="6.6 Bucketsort"></a>6.6 Bucketsort</h3><ul><li><p>桶排序$O(N)$</p><ol><li><p>通常桶越多，执行效率越快，即省时间，但是桶越多，空间消耗就越大，是一种通过<strong>空间换时间</strong>的方式</p></li><li><p>桶排序的时间代价，假设有<em>m</em>个桶，则每个桶的元素为<em>n/m;</em></p><p>当辅助函数为冒泡排序$O(n2)$时,桶排序为 $O(n)+mO((n/m)2)$;</p><p>当辅助函数为快速排序时$O(nlgn)$时,桶排序为 $*O(n)+mO(n/m log(n/m))$</p></li><li><p>每个桶存储区间内的元素<em>(</em>区间为半开区间例如<em>[0,10)</em>或者<em>[200,300) )</em></p></li><li><p>根据数据规模 n 划分，m 个相同大小的区间 （每个区间为一个桶，桶可理解为容器）</p></li></ol></li></ul><h3 id="6-7-Insertionsort"><a href="#6-7-Insertionsort" class="headerlink" title="6.7 Insertionsort"></a>6.7 Insertionsort</h3><ul><li>inversion: pair ( i, j ) having the property that i &lt; j but A[i] &gt; A[j]</li></ul><h2 id="chap7-Hashing-amp-Rehashing"><a href="#chap7-Hashing-amp-Rehashing" class="headerlink" title="chap7 Hashing &amp; Rehashing"></a>chap7 Hashing &amp; Rehashing</h2><ul><li>Hashing collision: Two elements with different keys share the same hash value</li></ul><h2 id="chap8-Union-find"><a href="#chap8-Union-find" class="headerlink" title="chap8 Union-find"></a>chap8 Union-find</h2><ul><li><p>不做优化的话最差时间复杂度是线性的</p></li><li><p>union by size/union by height</p><ul><li>用于如何合并两棵树的判断，小的成为大的的儿子/矮的成为高的的儿子</li></ul></li><li>union by size<ul><li>$S[root]=-size$</li><li>N 次插入 M 次搜索时间复杂度$O(N+M\log_2N)$</li></ul></li><li>n 个元素 m 个关系，至少 n-m 个等价类</li><li>File Transfer<ul><li>寻找根</li><li>union by size</li><li>check 是否联通</li></ul></li></ul><h2 id="chap9-Graph"><a href="#chap9-Graph" class="headerlink" title="chap9 Graph"></a>chap9 Graph</h2><h3 id="9-1-Graph-definition"><a href="#9-1-Graph-definition" class="headerlink" title="9.1 Graph definition"></a>9.1 Graph definition</h3><ul><li><p>$G(V,E)$</p><ul><li>G: Graph</li><li>$V=V(G)$: 有限非空顶点集合</li><li>$E=E(G)$: 有限边集合</li><li>不允许自成环</li></ul></li><li><p>$G_1\subset G=V(G_1)\subset V(G)\&amp;\&amp;E(G_1)\subset E(G)$</p></li><li><p>connect graph：每个点到任一点都有通路</p></li><li><p>component of an undirected G: 最大连接子图</p></li><li><p>强连通图</p><p>有向图中，若任意两个顶点 Vi 和 Vj，满足从 Vi 到 Vj 以及从 Vj 到 Vi 都连通，也就是都含有至少一条通路，则称此有向图为强连通图。</p></li><li><p>若有向图本身不是强连通图，但其包含的最大连通子图具有强连通图的性质，则称该子图为强连通分量</p></li><li><p>$degree(V)$顶点周围边的条数</p><ul><li>n 顶点 e 边：$\sum_{i=0}^{n-1}degree(v_i)/2=e$</li></ul></li><li><p>Adjacency Matrix 邻接矩阵</p></li><li><p>Adjacency List 邻接链表</p></li></ul><h3 id="9-2-Topological-sort"><a href="#9-2-Topological-sort" class="headerlink" title="9.2 Topological sort"></a>9.2 Topological sort</h3><ul><li>AOV network: 有向不循环图</li><li>if a project is feasible, it must be irreflexive<ul><li>irreflexive: 存在 i 到 j 有通路但无边</li></ul></li><li>拓扑排序不唯一</li><li>Is Topological Order<ul><li>拓扑排序的判断</li></ul></li></ul><h3 id="9-3-Shortest-path"><a href="#9-3-Shortest-path" class="headerlink" title="9.3 Shortest path"></a>9.3 Shortest path</h3><ul><li>If there is no negative-cost cycle, the shortest path from s to s is defined to be 0</li><li>$T = O( |V| + |E| )$</li><li>Shortest Path [3]<ul><li>最短路径条数+最短路径长度</li></ul></li><li>Shortest Path [4]<ul><li>最短路径长度+最短路径上终点前的节点</li></ul></li></ul><h3 id="9-4-Network-flow"><a href="#9-4-Network-flow" class="headerlink" title="9.4 Network flow"></a>9.4 Network flow</h3><ul><li>最大流算法<ul><li>找当前节点上最大的路径<ul><li>network.c dinic 算法</li><li>Universal Travel Sites</li></ul></li></ul></li></ul><h3 id="9-5-Minimum-Spanning-Tree"><a href="#9-5-Minimum-Spanning-Tree" class="headerlink" title="9.5 Minimum Spanning Tree"></a>9.5 Minimum Spanning Tree</h3><ul><li>边数=顶点数-1</li></ul><h3 id="9-6-MST"><a href="#9-6-MST" class="headerlink" title="9.6 MST"></a>9.6 MST</h3><h3 id="9-7-DFS"><a href="#9-7-DFS" class="headerlink" title="9.7 DFS"></a>9.7 DFS</h3><ul><li><p>欧拉回路</p><ul><li>An Euler tour is possible if there are exactly two vertices having odd degree. One must start at one of the odd-degree vertices.</li><li>欧拉通路、欧拉回路、欧拉图<br>无向图：<ol><li>设 G 是连通无向图，则称经过 G 的每条边一次并且仅一次的路径为欧拉通路；</li><li>如果欧拉通路是回路（起点和终点是同一个顶点），则称此回路为欧拉回路（Euler circuit）；</li><li>具有欧拉回路的无向图 G 称为欧拉图（Euler graph）。<br>有向图：</li><li>设 D 是有向图，D 的基图连通，则称经过 D 的每条边一次并且仅一次的有向路径为有向欧拉通路；</li><li>如果有向欧拉通路是有向回路，则称此有向回路为有向欧拉回路（directed Euler circuit）；</li><li>具有有向欧拉回路的有向图 D 称为有向欧拉图（directed Euler graph）。</li></ol></li></ul><ol><li>定理及推论<br>欧拉通路和欧拉回路的判定是很简单的，请看下面的定理及推论。</li></ol><blockquote><p>定理 5.1 无向图 G 存在欧拉通路的充要条件是：G 为连通图，并且 G 仅有两个奇度结点（度数为奇数的顶点）或者无奇度结点。</p><p>推论 5.1：</p><ol><li>当 G 是仅有两个奇度结点的连通图时，G 的欧拉通路必以此两个结点为端点。</li><li>当 G 是无奇度结点的连通图时，G 必有欧拉回路。</li><li>G 为欧拉图（存在欧拉回路）的充分必要条件是 G 为无奇度结点的连通图。</li></ol><p>定理 5.2 有向图 D 存在欧拉通路的充要条件是：<br>D 为有向图，D 的基图连通，并且所有顶点的出度与入度都相等；或者除两个顶点外，其余顶点的出度与入度都相等，而这两个顶点中一个顶点的出度与入度之差为 1，另一个顶点的出度<br>与入度之差为-1。<br>推论 5.2：</p><ol><li>当 D 除出、入度之差为 1，-1 的两个顶点之外，其余顶点的出度与入度都相等时，D 的有向欧拉通路必以出、入度之差为 1 的顶点作为始点，以出、入度之差为-1 的顶点作为终点。</li><li>当 D 的所有顶点的出、入度都相等时，D 中存在有向欧拉回路。</li><li>有向图 D 为有向欧拉图的充分必要条件是 D 的基图为连通图，并且所有顶点的出、入度都相等。</li></ol></blockquote><ol><li>欧拉回路的应用<br>欧拉回路最著名的有三个应用，大家可以网上百度一下，这里不详述。<br>哥尼斯堡七桥问题<br>一笔画问题。<br>旋转鼓轮的设计 4.欧拉回路的判定<br>判断欧拉路是否存在的方法<br>有向图：图连通，有一个顶点出度大入度 1，有一个顶点入度大出度 1，其余都是出度=入度。<br>无向图：图连通，只有两个顶点是奇数度，其余都是偶数度的。<br>判断欧拉回路是否存在的方法<br>有向图：图连通，所有的顶点出度=入度。<br>无向图：图连通，所有顶点都是偶数度。</li></ol></li><li><p>Strongly Connected Components</p><ul><li>寻找回路：所有顶点的出、入度都相等时，D 中存在有向欧拉回路。</li></ul><ol><li>有向图 D 为有向欧拉图的充分必要条件是 D 的基图为连通图，并且所有顶点的出、入度都相等。</li><li>欧拉回路的应用<br>欧拉回路最著名的有三个应用，大家可以网上百度一下，这里不详述。<br>哥尼斯堡七桥问题<br>一笔画问题。<br>旋转鼓轮的设计</li><li>欧拉回路的判定<br>判断欧拉路是否存在的方法<br>有向图：图连通，有一个顶点出度大入度 1，有一个顶点入度大出度 1，其余都是出度=入度。<br>无向图：图连通，只有两个顶点是奇数度，其余都是偶数度的。<br>判断欧拉回路是否存在的方法<br>有向图：图连通，所有的顶点出度=入度。<br>无向图：图连通，所有顶点都是偶数度。</li></ol></li><li><p>Strongly Connected Components</p><ul><li>寻找回路</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>一些课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fds</tag>
      
      <tag>cs</tag>
      
      <tag>课程笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宏观经济学 马工程教材笔记整理</title>
    <link href="/2020/07/02/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E9%A9%AC%E5%B7%A5%E7%A8%8B%E6%95%99%E6%9D%90%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    <url>/2020/07/02/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E9%A9%AC%E5%B7%A5%E7%A8%8B%E6%95%99%E6%9D%90%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<!-- <div class="row">    <embed src="/pdfs/宏观经济学.pdf" width="100%" height="550" type="application/pdf"></div> --><object data="/pdfs/宏观经济学.pdf" type="application/pdf" width="100%" height="877px">]]></content>
    
    
    <categories>
      
      <category>一些课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课程笔记</tag>
      
      <tag>宏观经济学</tag>
      
      <tag>金融</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
